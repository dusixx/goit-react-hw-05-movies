{"version":3,"file":"static/js/9179.ed31cb77.chunk.js","mappings":"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","sources":["components/MovieCard/Reviews/ReviewItem/ReviewItem.jsx","components/MovieCard/Reviews/ReviewItem/ReviewItem.styled.jsx","components/etc/ExpandableContent/ExpandableContent.jsx","components/etc/ExpandableContent/ExpandableContent.styled.jsx","services/tmdb/cache.js","services/tmdb/helpers.js","services/tmdb/tmdbSrv.js"],"sourcesContent":["import { object, number, string } from 'prop-types';\nimport { getAvatar } from 'services/tmdb/helpers';\nimport { IconNoAvatar } from 'styles/icons';\nimport { ExpandableContent } from 'components/etc/ExpandableContent';\n\nimport {\n  Container,\n  AvatarThumb,\n  AvatarImage,\n  AvatarAndName,\n  Header,\n  HeaderGroup,\n  SourceLink,\n} from './ReviewItem.styled';\n\nconst AVATAR_WIDTH = 185;\nconst CONTENT_MAX_HEIGHT = 100;\nconst ICON_NO_AVATAR_SIZE = 60;\nconst ICON_NO_AVATAR_COLOR = 'lightgray';\nconst NEW_TAB = { target: '_blank', rel: 'noopener noreferrer' };\n\n//\n// ReviewCard\n//\n\nexport const ReviewItem = ({\n  author_details: { avatar_path },\n  author,\n  content,\n  url,\n  created_at,\n  updated_at,\n  id,\n}) => {\n  const createdDate = new Date(created_at).toLocaleString();\n\n  return (\n    <Container>\n      <Header>\n        <AvatarAndName>\n          <AvatarThumb>\n            {avatar_path ? (\n              <AvatarImage\n                src={getAvatar(avatar_path, AVATAR_WIDTH)}\n                alt={author}\n              />\n            ) : (\n              <IconNoAvatar\n                size={ICON_NO_AVATAR_SIZE}\n                color={ICON_NO_AVATAR_COLOR}\n              />\n            )}\n          </AvatarThumb>\n          <b>{author}</b>\n        </AvatarAndName>\n\n        <HeaderGroup>\n          <span>{createdDate}</span>\n          <SourceLink to={url} title={url} {...NEW_TAB}>\n            Direct link\n          </SourceLink>\n        </HeaderGroup>\n      </Header>\n\n      <ExpandableContent content={content} maxHeight={CONTENT_MAX_HEIGHT} />\n    </Container>\n  );\n};\n\nReviewItem.propType = {\n  author_details: object,\n  author: string,\n  content: string,\n  url: string,\n  created_at: string,\n  updated_at: string,\n  id: number,\n};\n","import styled from '@emotion/styled';\nimport { FlexCentered, LinkPrimary } from 'styles/shared';\n\n// movies/860623\nexport const Container = styled.article`\n  padding: 20px;\n  width: 100%;\n  background: linear-gradient(180deg, #ebebeb 0, transparent);\n`;\n\nexport const AvatarAndName = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n\n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n  }\n`;\n\nexport const AvatarThumb = styled.div`\n  ${FlexCentered()};\n  width: 60px;\n  height: 60px;\n\n  border-radius: 50%;\n  border: 1px solid rgb(0 0 0 / 0.15);\n  overflow: hidden;\n`;\n\nexport const AvatarImage = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  /* При таком позиционировании видно лица */\n  object-position: top;\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-bottom: 15px;\n\n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n    justify-content: space-between;\n  }\n`;\n\nexport const HeaderGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 5px;\n\n  margin-top: 10px;\n  font-size: 12px;\n\n  @media screen and (min-width: 768px) {\n    align-items: flex-end;\n  }\n`;\n\nexport const SourceLink = styled(LinkPrimary)``;\n","import { useRef, useState, useEffect, useCallback } from 'react';\nimport { Content, Expander } from './ExpandableContent.styled';\nimport { markupLinks } from 'utils';\nimport debounce from 'lodash.debounce';\nimport { string, number } from 'prop-types';\n\nconst DEBOUNCE_DELAY = 100;\n\n//\n// ExpandableContent\n//\n\nexport const ExpandableContent = ({ content, maxHeight = Infinity }) => {\n  const [showExpander, setShowExpander] = useState(false);\n  const contentRef = useRef(null);\n\n  const contentShouldBeCollapsed = useCallback(() => {\n    const { current: ref } = contentRef;\n\n    // раскрываем и замеряем высоту контента для текущей высоты вьюпорта\n    ref.style.maxHeight = 'max-content';\n    const { height } = ref.getBoundingClientRect();\n    ref.style.maxHeight = null;\n\n    return height > maxHeight;\n  }, [maxHeight]);\n\n  useEffect(() => {\n    setShowExpander(contentShouldBeCollapsed());\n\n    const handleWindowResize = debounce(() => {\n      setShowExpander(contentShouldBeCollapsed());\n    }, DEBOUNCE_DELAY);\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => window.removeEventListener('resize', handleWindowResize);\n  }, [contentShouldBeCollapsed]);\n\n  return (\n    <>\n      <Content\n        ref={contentRef}\n        // В постах попадается разметка, ставим в innerHTML\n        dangerouslySetInnerHTML={{ __html: markupLinks(content) }}\n        maxHeight={showExpander ? maxHeight : 'max-content'}\n      />\n      {showExpander && (\n        <Expander onClick={() => setShowExpander(false)}>Show full</Expander>\n      )}\n    </>\n  );\n};\n\nExpandableContent.propType = {\n  content: string,\n  maxHeight: number,\n};\n","import styled from '@emotion/styled';\nimport { ButtonLink, LinkBase } from 'styles/shared';\nimport { calcCSSValue } from 'utils';\n\n// pre чтобы сохранить оригинальное форматирование\nexport const Content = styled.pre`\n  max-height: ${({ maxHeight }) => calcCSSValue(maxHeight)};\n\n  font-family: inherit;\n  line-height: 1.5;\n\n  white-space: pre-wrap;\n  overflow: hidden;\n\n  /* Линки внутри поста */\n  & a {\n    ${LinkBase};\n    color: var(--color-blue);\n    &:hover,\n    &:focus-visible {\n      color: var(--color-orange);\n    }\n  }\n`;\n\nexport const Expander = styled(ButtonLink)`\n  display: block;\n  margin: 10px auto 0 auto;\n  padding: 10px 10px 10px 0;\n\n  font-size: 12px;\n  font-weight: bold;\n  letter-spacing: -0.2px;\n  color: #a7a7a7;\n\n  @media screen and (min-width: 768px) {\n    margin: 10px 0 0 0;\n  }\n`;\n","import { setProp, getProp } from 'utils';\n\nexport default class Cache {\n  #cache = {};\n\n  set(path, value) {\n    setProp(this.#cache, path, value);\n  }\n\n  get(path) {\n    return getProp(this.#cache, path);\n  }\n\n  get data() {\n    return { ...this.#cache };\n  }\n\n  clear() {\n    this.#cache = {};\n  }\n}\n","import { normalizeStr } from 'utils';\nimport TmdbService from './tmdbSrv';\n\nconst srv = new TmdbService();\n\n/**\n *\n * Убирает дублирование персон, сворачивая поле [fieldName] в список\n * @param {array} data - массив данных (объектов) о съмочной группе\n * @returns - массив объектов без дублирования\n */\nconst normalizeCredits = (data, fieldName) => {\n  if (!Array.isArray(data)) return [];\n\n  const hash = data.reduce((res, personData) => {\n    const { id } = personData;\n    const fieldValue = personData[fieldName];\n\n    if (res[id]) {\n      res[id][fieldName].push(fieldValue);\n    } else {\n      res[id] = { ...personData, [fieldName]: [fieldValue] };\n    }\n\n    return res;\n  }, {});\n\n  // преобразуем в строку, чтобы не делать это в целевом компоненте\n  return Object.values(hash).map(obj => ({\n    ...obj,\n    [fieldName]: obj[fieldName].join(', '),\n  }));\n};\n\nexport const normalizeCrewData = crew => normalizeCredits(crew, 'job');\nexport const normalizeCastData = cast => normalizeCredits(cast, 'character');\n\n/**\n *\n * Информация об актерах\n * @param {object} credits - объект с массивами cast и crew\n * @param {number} count - кол-во имен актеров для анонса\n * @returns {object}\n *  {preview, remaining}\n *    preview - строка-список имен (анонс)\n *    remaining - строка (оставшиеся) для ссылки на страницу всех актеров\n */\nexport const getCastPreview = (credits, count = 5) => {\n  if (!Array.isArray(credits?.cast)) return;\n  const { cast } = credits;\n\n  // валидность данных массива не проверяем (для упрощения)\n  const castList = cast\n    .slice(0, count)\n    .map(({ original_name, name }) => original_name || name);\n\n  const remainingCount = cast.length - castList.length;\n  const remaining =\n    remainingCount > 0\n      ? `...other ${remainingCount} actor(s)`\n      : `...other actor(s)`;\n\n  return castList.length > 0\n    ? {\n        preview: castList.join(', '),\n        remaining,\n      }\n    : null;\n};\n\n/**\n *\n * Информация об основном персонале\n * @param {object} credits - объект с массивами cast и crew\n * @returns {object} - {director, screenplay, writer, ...}\n */\nexport const getCrewPreview = credits => {\n  if (!Array.isArray(credits?.crew)) return;\n  const { crew } = credits;\n\n  let personsCount = 0;\n\n  const personsList = {\n    director: [],\n    screenplay: [],\n    writer: [],\n    characters: [],\n    story: [],\n  };\n\n  // known_for_department\n  const data = crew.reduce((res, { department, job, name }) => {\n    const jobName = normalizeStr(job);\n    const dep = normalizeStr(department);\n\n    if (jobName === 'director' && dep !== 'directing') return res;\n\n    if (res[jobName]) {\n      personsCount += 1;\n      res[jobName] = [...res[jobName], name];\n    }\n\n    return res;\n  }, personsList);\n\n  return personsCount ? data : null;\n};\n\nexport const getAvatar = (path, width) => {\n  return path\n    ? /http/i.test(path)\n      ? path.replace(/\\//, '')\n      : srv.getImageUrl(path, width)\n    : null;\n};\n","import axios from 'axios';\nimport { isObj, isArray, camelToSnake, normalizeStr } from '../../utils';\nimport Cache from './cache';\n\nconst cache = new Cache();\n// let controller;\n\nconst data = {\n  API_BASE_URL: 'https://api.themoviedb.org/3',\n  IMAGE_BASE_URL: 'https://image.tmdb.org/t/p',\n  TMDB_BASE_URL: 'https://www.themoviedb.org/movie',\n  IMDB_BASE_URL: 'https://www.imdb.com/title',\n  API_KEY: '86d04e898c465c8de09e1ea2fc383ab8',\n};\n\n//\n// TmdbService\n//\n\nexport default class TmdbService {\n  #response;\n  #instance;\n\n  constructor() {\n    if (this.#instance) return this.#instance;\n    this.#instance = this;\n  }\n\n  /**\n   *\n   * @param {*} relPath\n   * @param {*} size\n   * @returns\n   */\n  getImageUrl(relPath, size) {\n    const sz = isNaN(parseInt(size)) ? 'original' : `w${size}`;\n    return `${data.IMAGE_BASE_URL}/${sz}/${relPath}`;\n  }\n\n  getTmdbUrl(id) {\n    return `${data.TMDB_BASE_URL}/${id}`;\n  }\n\n  getImdbUrl(imdbId) {\n    return `${data.IMDB_BASE_URL}/${imdbId}`;\n  }\n\n  /**\n   *\n   * @param {*} url\n   * @returns\n   */\n  async fetch(url) {\n    // controller = new AbortController();\n    // const { signal } = controller;\n\n    try {\n      const resp = await axios.get(url /* { signal } */);\n      return { ...(this.#response = resp) };\n      // error\n    } catch (err) {\n      this.#response = err;\n      throw err;\n    }\n  }\n\n  /**\n   *\n   * @param {*} path\n   * @param {*} params\n   * @returns\n   */\n  async get(path, params) {\n    const url = `${data.API_BASE_URL}/${path}?api_key=${\n      data.API_KEY\n    }&${new URLSearchParams(namesToSnake(params))}`;\n\n    return await this.fetch(url);\n  }\n\n  /**\n   *\n   * @param {array} ids - массив идентификаторов жанра\n   * @returns массив названий жанра для каждого идентификатора\n   */\n  async getGenres(ids) {\n    if (!isArray(ids)) return [];\n\n    if (!cache.get('genres')) {\n      const resp = await this.get(`genre/movie/list`);\n      cache.set('genres', resp.data.genres);\n    }\n\n    return cache\n      .get('genres')\n      .filter(({ id }) => ids.includes(id))\n      .map(({ name }) => name);\n  }\n\n  /**\n   *\n   * @param {*} period\n   * @param {*} params\n   * @returns\n   */\n  async getTrendingMovies(period, params) {\n    // не кешируем - грузятся страницами\n    const { data } = await this.get(\n      `trending/movie/${normalizeStr(period)}`,\n      params\n    );\n\n    return data;\n  }\n\n  /**\n   *\n   * @param {*} id\n   * @param {*} params\n   * @returns\n   */\n  async getMovieDetails(id, params) {\n    const cached = cache.get(`movie/${id}`);\n    if (cached) return cached;\n\n    const { data } = await this.get(`movie/${id}`, params);\n    cache.set(`movie/${id}`, data);\n\n    return data;\n  }\n\n  async getMovieCredits(id, params) {\n    const cached = cache.get(`movie/${id}/credits`);\n    if (cached) return cached;\n\n    const { data } = await this.get(`movie/${id}/credits`, params);\n    cache.set(`movie/${id}/credits`, data);\n\n    return data;\n  }\n\n  // не кешируем - грузятся страницами\n  async getMovieReviews(id, params) {\n    const { data } = await this.get(`movie/${id}/reviews`, params);\n    return data;\n  }\n\n  async searchMovies(query, params) {\n    const { data } = await this.get(`search/movie`, { query, ...params });\n    return data;\n  }\n\n  get cache() {\n    return cache.data;\n  }\n\n  // abort() {\n  //   controller.abort();\n  // }\n}\n\n/**\n *\n * @param {object} obj\n * @returns - копию obj с именами свойств в snake_case\n */\nfunction namesToSnake(obj) {\n  return isObj(obj)\n    ? Object.entries(obj).reduce((res, [name, val]) => {\n        res[camelToSnake(name)] = val;\n        return res;\n      }, {})\n    : {};\n}\n"],"names":["NEW_TAB","target","rel","ReviewItem","avatar_path","author_details","author","content","url","created_at","createdDate","updated_at","id","Date","toLocaleString","Container","Header","AvatarAndName","AvatarThumb","AvatarImage","src","getAvatar","alt","IconNoAvatar","size","color","HeaderGroup","SourceLink","to","title","ExpandableContent","maxHeight","propType","object","string","number","styled","FlexCentered","LinkPrimary","Infinity","useState","showExpander","setShowExpander","contentRef","useRef","contentShouldBeCollapsed","useCallback","ref","current","style","height","getBoundingClientRect","useEffect","handleWindowResize","debounce","window","addEventListener","removeEventListener","Content","dangerouslySetInnerHTML","__html","markupLinks","Expander","onClick","calcCSSValue","LinkBase","ButtonLink","Cache","path","value","setProp","this","getProp","srv","TmdbService","normalizeCredits","data","fieldName","Array","isArray","hash","reduce","res","personData","fieldValue","push","Object","values","map","obj","join","normalizeCrewData","crew","normalizeCastData","cast","getCastPreview","credits","count","castList","slice","original_name","name","remainingCount","length","remaining","preview","getCrewPreview","personsCount","department","job","jobName","normalizeStr","dep","director","screenplay","writer","characters","story","width","test","replace","getImageUrl","cache","relPath","sz","isNaN","parseInt","imdbId","axios","resp","params","URLSearchParams","isObj","entries","val","camelToSnake","fetch","ids","get","set","genres","filter","includes","period","cached","query"],"sourceRoot":""}
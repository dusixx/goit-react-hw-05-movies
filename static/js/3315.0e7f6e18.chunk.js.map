{"version":3,"file":"static/js/3315.0e7f6e18.chunk.js","mappings":"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","sources":["services/tmdb/cache.js","services/tmdb/helpers.js","services/tmdb/tmdbSrv.js"],"sourcesContent":["import { setProp, getProp } from 'utils';\n\nexport default class Cache {\n  #cache = {};\n\n  set(path, value) {\n    setProp(this.#cache, path, value);\n  }\n\n  get(path) {\n    return getProp(this.#cache, path);\n  }\n\n  get data() {\n    return { ...this.#cache };\n  }\n\n  clear() {\n    this.#cache = {};\n  }\n}\n","import { normalizeStr } from 'utils';\nimport TmdbService from './tmdbSrv';\n\nconst srv = new TmdbService();\n\n/**\n *\n * Убирает дублирование персон, сворачивая поле [fieldName] в список\n * @param {array} data - массив данных (объектов) о съмочной группе\n * @returns - массив объектов без дублирования\n *\n * !! id(283546) в crew один человек(\"Luke Losey\") Director/Writer, но разные id\n */\nconst normalizeCredits = (data, fieldName) => {\n  if (!Array.isArray(data)) return [];\n\n  const hash = data.reduce((res, personData) => {\n    const { id } = personData;\n    const fieldValue = personData[fieldName];\n\n    if (res[id]) {\n      res[id][fieldName].push(fieldValue);\n    } else {\n      res[id] = { ...personData, [fieldName]: [fieldValue] };\n    }\n\n    return res;\n  }, {});\n\n  // преобразуем в строку, чтобы не делать это в целевом компоненте\n  return Object.values(hash).map(obj => ({\n    ...obj,\n    [fieldName]: obj[fieldName].join(', '),\n  }));\n};\n\nexport const normalizeCrewData = crew => normalizeCredits(crew, 'job');\nexport const normalizeCastData = cast => normalizeCredits(cast, 'character');\n\n/**\n *\n * Информация об актерах\n * @param {object} credits - объект с массивами cast и crew\n * @param {number} count - кол-во имен актеров для анонса\n * @returns {object}\n *  {preview, remaining}\n *    preview - строка-список имен (анонс)\n *    remaining - строка (оставшиеся) для ссылки на страницу всех актеров\n */\nexport const getCastPreview = (credits, count = 5) => {\n  if (!Array.isArray(credits?.cast)) return;\n  const { cast } = credits;\n\n  // валидность данных массива не проверяем (для упрощения)\n  const castList = cast\n    .slice(0, count)\n    .map(({ original_name, name }) => original_name || name);\n\n  const remainingCount = cast.length - castList.length;\n  const remaining =\n    remainingCount > 0\n      ? `...other ${remainingCount} actor(s)`\n      : `...other actor(s)`;\n\n  return castList.length > 0\n    ? {\n        preview: castList.join(', '),\n        remaining,\n      }\n    : null;\n};\n\n/**\n *\n * Информация об основном персонале\n * @param {object} credits - объект с массивами cast и crew\n * @returns {object} - {director, screenplay, writer, ...}\n */\nexport const getCrewPreview = credits => {\n  if (!Array.isArray(credits?.crew)) return;\n  const { crew } = credits;\n\n  let personsCount = 0;\n\n  const personsList = {\n    director: [],\n    screenplay: [],\n    writer: [],\n    characters: [],\n    story: [],\n  };\n\n  // known_for_department\n  const data = crew.reduce((res, { department, job, name }) => {\n    const jobName = normalizeStr(job);\n    const dep = normalizeStr(department);\n\n    if (jobName === 'director' && dep !== 'directing') return res;\n\n    if (res[jobName]) {\n      personsCount += 1;\n      res[jobName] = [...res[jobName], name];\n    }\n\n    return res;\n  }, personsList);\n\n  return personsCount ? data : null;\n};\n\nexport const getAvatar = (path, width) => {\n  return path\n    ? /http/i.test(path)\n      ? path.replace(/\\//, '')\n      : srv.getImageUrl(path, width)\n    : null;\n};\n","import axios from 'axios';\nimport { isObj, isArray, camelToSnake, normalizeStr } from '../../utils';\nimport Cache from './cache';\n\nconst cache = new Cache();\n// let controller;\n\nconst data = {\n  API_BASE_URL: 'https://api.themoviedb.org/3',\n  IMAGE_BASE_URL: 'https://image.tmdb.org/t/p',\n  TMDB_BASE_URL: 'https://www.themoviedb.org/movie',\n  IMDB_BASE_URL: 'https://www.imdb.com/title',\n  API_KEY: '86d04e898c465c8de09e1ea2fc383ab8',\n};\n\n//\n// TmdbService\n//\n\nexport default class TmdbService {\n  #response;\n  #instance;\n\n  constructor() {\n    if (this.#instance) return this.#instance;\n    this.#instance = this;\n  }\n\n  /**\n   *\n   * @param {*} relPath\n   * @param {*} size\n   * @returns\n   */\n  getImageUrl(relPath, size) {\n    const sz = isNaN(parseInt(size)) ? 'original' : `w${size}`;\n    return `${data.IMAGE_BASE_URL}/${sz}/${relPath}`;\n  }\n\n  getTmdbUrl(id) {\n    return `${data.TMDB_BASE_URL}/${id}`;\n  }\n\n  getImdbUrl(imdbId) {\n    return `${data.IMDB_BASE_URL}/${imdbId}`;\n  }\n\n  /**\n   *\n   * @param {*} url\n   * @returns\n   */\n  async fetch(url) {\n    // controller = new AbortController();\n    // const { signal } = controller;\n\n    try {\n      const resp = await axios.get(url /* { signal } */);\n      return { ...(this.#response = resp) };\n      // error\n    } catch (err) {\n      this.#response = err;\n      throw err;\n    }\n  }\n\n  /**\n   *\n   * @param {*} path\n   * @param {*} params\n   * @returns\n   */\n  async get(path, params) {\n    const url = `${data.API_BASE_URL}/${path}?api_key=${\n      data.API_KEY\n    }&${new URLSearchParams(namesToSnake(params))}`;\n\n    return await this.fetch(url);\n  }\n\n  /**\n   *\n   * @param {array} ids - массив идентификаторов жанра\n   * @returns массив названий жанра для каждого идентификатора\n   */\n  async getGenres(ids) {\n    if (!isArray(ids)) return [];\n\n    if (!cache.get('genres')) {\n      const resp = await this.get(`genre/movie/list`);\n      cache.set('genres', resp.data.genres);\n    }\n\n    return cache\n      .get('genres')\n      .filter(({ id }) => ids.includes(id))\n      .map(({ name }) => name);\n  }\n\n  /**\n   *\n   * @param {*} period\n   * @param {*} params\n   * @returns\n   */\n  async getTrendingMovies(period, params) {\n    // не кешируем - грузятся страницами\n    const { data } = await this.get(\n      `trending/movie/${normalizeStr(period)}`,\n      params\n    );\n\n    return data;\n  }\n\n  /**\n   *\n   * @param {*} id\n   * @param {*} params\n   * @returns\n   */\n  async getMovieDetails(id, params) {\n    const cached = cache.get(`movie/${id}`);\n    if (cached) return cached;\n\n    const { data } = await this.get(`movie/${id}`, params);\n    cache.set(`movie/${id}`, data);\n\n    return data;\n  }\n\n  async getMovieCredits(id, params) {\n    const cached = cache.get(`movie/${id}/credits`);\n    if (cached) return cached;\n\n    const { data } = await this.get(`movie/${id}/credits`, params);\n    cache.set(`movie/${id}/credits`, data);\n\n    return data;\n  }\n\n  // не кешируем - грузятся страницами\n  async getMovieReviews(id, params) {\n    const { data } = await this.get(`movie/${id}/reviews`, params);\n    return data;\n  }\n\n  async searchMovies(query, params) {\n    const { data } = await this.get(`search/movie`, { query, ...params });\n    return data;\n  }\n\n  get cache() {\n    return cache.data;\n  }\n\n  // abort() {\n  //   controller.abort();\n  // }\n}\n\n/**\n *\n * @param {object} obj\n * @returns - копию obj с именами свойств в snake_case\n */\nfunction namesToSnake(obj) {\n  return isObj(obj)\n    ? Object.entries(obj).reduce((res, [name, val]) => {\n        res[camelToSnake(name)] = val;\n        return res;\n      }, {})\n    : {};\n}\n"],"names":["Cache","path","value","setProp","this","getProp","srv","TmdbService","normalizeCredits","data","fieldName","Array","isArray","hash","reduce","res","personData","id","fieldValue","push","Object","values","map","obj","join","normalizeCrewData","crew","normalizeCastData","cast","getCastPreview","credits","count","castList","slice","original_name","name","remainingCount","length","remaining","preview","getCrewPreview","personsCount","department","job","jobName","normalizeStr","dep","director","screenplay","writer","characters","story","getAvatar","width","test","replace","getImageUrl","cache","relPath","size","sz","isNaN","parseInt","imdbId","url","axios","resp","params","URLSearchParams","isObj","entries","val","camelToSnake","fetch","ids","get","set","genres","filter","includes","period","cached","query"],"sourceRoot":""}
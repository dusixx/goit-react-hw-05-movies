{"version":3,"file":"static/js/6741.76bc22d2.chunk.js","mappings":"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","sources":["components/MovieGallery/MovieGallery.jsx","components/MovieGallery/MovieGallery.styled.jsx","components/MovieGallery/MovieGalleryItem/MovieGalleryItem.jsx","components/MovieGallery/MovieGalleryItem/MovieGalleryItem.styled.jsx","components/etc/Spinner/Spinner.jsx","hooks/useImageGallery.js","services/tmdb/cache.js","services/tmdb/tmdbSrv.js"],"sourcesContent":["import { useRef } from 'react';\nimport { func, array, exact, string, bool, number } from 'prop-types';\nimport { List, Item } from './MovieGallery.styled';\nimport { MovieGalleryItem } from './MovieGalleryItem/MovieGalleryItem';\nimport { useImageGallery } from '../../hooks/useImageGallery';\n\n//\n// MovieGallery\n//\n\nconst MovieGallery = ({\n  data = [],\n  sortOptions,\n  onLoad,\n  scrollBy,\n  loader: Loader,\n}) => {\n  const listRef = useRef(null);\n  const [showLoader] = useImageGallery({ listRef, onLoad, data, scrollBy });\n\n  // !! На week-трендах повторился фильм (id==87).\n  // Запоминаем id, чтобы избежать дублирования\n  const hash = {};\n\n  return (\n    data.length > 0 && (\n      <>\n        <List ref={listRef}>\n          {data.map(({ id, ...restProps }) => {\n            if (hash[id]) return null;\n            hash[id] = true;\n\n            return (\n              <Item key={id}>\n                <MovieGalleryItem id={id} {...restProps} />\n              </Item>\n            );\n          })}\n        </List>\n        {showLoader && Loader}\n      </>\n    )\n  );\n};\n\nMovieGallery.propTypes = {\n  data: array,\n  onLoad: func,\n  Loader: func,\n  scrollBy: number,\n  sortOptions: exact({\n    key: string,\n    ascending: bool,\n  }),\n};\n\nexport default MovieGallery;\n","import styled from '@emotion/styled';\n\n// const POSTER_HMULT = 1.5;\n// const POSTER_MAX_WIDTH = 500;\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-gap: 15px;\n`;\n\nexport const Item = styled.li`\n  min-height: max-content;\n  position: relative;\n  aspect-ratio: 0.67; // h=1.5w\n`;\n","import { useState, useEffect, useRef } from 'react';\nimport { func, arrayOf, number, string } from 'prop-types';\nimport { showError } from 'utils';\nimport TmdbService from 'services/tmdb/tmdbSrv';\nimport { Spinner } from 'components/etc/Spinner';\nimport { SpinnerWrapper } from 'styles/shared';\n\nimport {\n  Poster,\n  MovieLink,\n  Overlay,\n  Title,\n  Overview,\n  Rating,\n  Genres,\n  AltTitle,\n} from './MovieGalleryItem.styled';\n\nconst srv = new TmdbService();\nconst DEF_POSTER_WIDTH = 500;\nconst STR_NA = 'N/A';\n\n//\n// MovieGalleryItem\n//\n\nexport const MovieGalleryItem = ({\n  id,\n  title,\n  poster_path,\n  vote_average,\n  vote_count,\n  overview,\n  release_date,\n  genre_ids,\n  onLoad,\n  ...restProps\n}) => {\n  const [wasLoaded, setWasLoaded] = useState(false);\n  const [genres, setGenres] = useState(null);\n  const imgRef = useRef(null);\n  const onLoadRef = useRef(onLoad);\n\n  // имена жанров\n  useEffect(() => {\n    srv\n      .getGenres(genre_ids)\n      .then(res => setGenres(res.join(', ')))\n      .catch(showError);\n  }, [genre_ids, id, wasLoaded]);\n\n  // onLoad\n  useEffect(() => {\n    if (wasLoaded || !poster_path) {\n      onLoadRef.current && onLoadRef.current(imgRef.current);\n    }\n  }, [wasLoaded, poster_path]);\n\n  const rating = vote_average ? vote_average.toFixed(1) : STR_NA;\n  const releaseYear = release_date?.substring(0, 4);\n\n  return (\n    <>\n      {(wasLoaded || !poster_path) && (\n        <Rating title={`Votes: ${vote_count}`}>{rating}</Rating>\n      )}\n\n      <MovieLink to={`/movies/${id}`}>\n        {!poster_path && (\n          <AltTitle>\n            {title}\n            {releaseYear && ` (${releaseYear})`}\n          </AltTitle>\n        )}\n\n        {poster_path && (\n          <>\n            {!wasLoaded && (\n              <SpinnerWrapper>\n                <Spinner spinnerWidth={35} />\n              </SpinnerWrapper>\n            )}\n            <Poster\n              ref={imgRef}\n              src={srv.getImageUrl(poster_path, DEF_POSTER_WIDTH)}\n              alt={title}\n              onLoad={() => setWasLoaded(true)}\n            />\n          </>\n        )}\n\n        <Overlay data-overlay>\n          {title && (\n            <Title>\n              {title}\n              {releaseYear && ` (${releaseYear})`}\n            </Title>\n          )}\n          {genres && <Genres>{genres}</Genres>}\n          {overview && <Overview>{overview}</Overview>}\n        </Overlay>\n      </MovieLink>\n    </>\n  );\n};\n\nMovieGalleryItem.propTypes = {\n  onLoad: func,\n  genre_ids: arrayOf(number),\n  title: string,\n  poster_path: string,\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nimport { FlexCentered, NoPosterBg, TransitionBase } from 'styles/shared';\n\nexport const MovieLink = styled(Link)`\n  ${NoPosterBg}\n\n  position: relative;\n\n  display: block;\n  width: 100%;\n  height: 100%;\n\n  color: var(--color-gray-lighter);\n  border-radius: var(--border-radius);\n  overflow: hidden;\n\n  &:hover,\n  &:focus-visible {\n    & [data-overlay] {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Rating = styled.span`\n  ${FlexCentered()};\n\n  position: absolute;\n  top: 15px;\n  right: -5px;\n  z-index: 9;\n\n  padding-left: 7px;\n  padding-right: 7px;\n  height: 20px;\n\n  font-size: 16px;\n  line-height: 0;\n\n  @media screen and (max-width: 320px),\n    (min-width: 555px) and (max-width: 650px),\n    (min-width: 800px) and (max-width: 900px) {\n    font-size: 14px;\n    padding: 0 4px 0 4px;\n  }\n\n  background-color: var(--color-orange);\n  border-radius: calc(var(--border-radius) * 0.5);\n  color: white;\n`;\n\nexport const Poster = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n\nexport const Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n\n  /* \n    Не будет выпадать маржин, например, у Overview\n    Паддинги работают для всего контента, в тч для Overview\n  */\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n\n  width: 100%;\n  height: 100%;\n\n  padding: 20px;\n  padding-bottom: 30px;\n\n  @media screen and (max-width: 320px),\n    (min-width: 555px) and (max-width: 650px),\n    (min-width: 800px) and (max-width: 900px) {\n    gap: 10px;\n  }\n\n  ${TransitionBase('opacity')};\n\n  background-color: rgb(0 0 0 / 0.8);\n  opacity: 0;\n`;\n\nexport const Title = styled.h2`\n  padding-right: 25px;\n\n  font-size: 24px;\n  line-height: 1.1;\n  letter-spacing: -0.2px;\n\n  overflow-wrap: break-word;\n\n  @media screen and (max-width: 320px),\n    (min-width: 555px) and (max-width: 650px),\n    (min-width: 800px) and (max-width: 900px) {\n    font-size: 16px;\n  }\n`;\n\nexport const AltTitle = styled.h3`\n  padding: 20px;\n  padding-right: 50px;\n\n  font-family: Arial Black;\n  font-size: 18px;\n  letter-spacing: -0.5px;\n\n  color: rgb(0 0 0 / 0.2);\n  overflow-wrap: break-word;\n\n  @media screen and (max-width: 320px),\n    (min-width: 555px) and (max-width: 650px),\n    (min-width: 800px) and (max-width: 900px) {\n    font-size: 16px;\n  }\n`;\n\nexport const Genres = styled.p`\n  font-size: 14px;\n  color: var(--color-orange);\n\n  @media screen and (max-width: 320px),\n    (min-width: 555px) and (max-width: 650px),\n    (min-width: 800px) and (max-width: 900px) {\n    font-size: 12px;\n  }\n`;\n\nexport const Overview = styled.p`\n  height: 100%;\n  padding-right: 5px;\n\n  font-size: 13px;\n  line-height: 1.1;\n\n  @media screen and (max-width: 320px),\n    (min-width: 555px) and (max-width: 650px),\n    (min-width: 800px) and (max-width: 900px) {\n    font-size: 11px;\n  }\n\n  color: rgba(255 255 255 / 0.5);\n  overflow: auto;\n\n  /* Custom scroll */\n  ::-webkit-scrollbar {\n    width: 3px;\n\n    &-track {\n      background: #f1f1f1;\n    }\n    &-thumb {\n      background: var(--color-blue);\n    }\n    &-thumb:hover {\n      background: var(--color-blue-light);\n    }\n  }\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { number, oneOfType, string } from 'prop-types';\n\nexport const Spinner = ({ width = 40, ...restProps }) => (\n  <RotatingLines\n    strokeColor=\"black\"\n    strokeWidth=\"3\"\n    animationDuration=\"0.75\"\n    width={width}\n    visible={true}\n    {...restProps}\n  />\n);\n\nSpinner.propType = {\n  width: oneOfType([string, number]),\n};\n","import { useRef, useState, useEffect } from 'react';\nimport { onImageLoad } from 'utils';\n\nconst DEF_SCROLL_BEHAVIOR = 'smooth';\nconst DEF_SCROLL_BY = 1.5;\n\nexport const useImageGallery = ({ listRef, onLoad, data, scrollBy }) => {\n  const [showLoader, setShowLoader] = useState(false);\n  const onLoadRef = useRef(onLoad);\n  const listItemHeight = useRef(null);\n  const curDataLen = useRef(null);\n\n  // полагаем, галерея загружена,\n  // если загружено последнее изображение(не lazy)\n  useEffect(() => {\n    listItemHeight.current =\n      listItemHeight.current ??\n      listRef.current?.firstElementChild?.getBoundingClientRect().height;\n\n    const imgs = listRef.current?.querySelectorAll('img');\n\n    if (imgs?.length) {\n      setShowLoader(true);\n      const lastImage = imgs[imgs.length - 1];\n\n      // вычисляем тут, в колбеке уже будут равны (curDataLen.current === data.length)\n      const shouldAutoscroll = curDataLen.current < data?.length;\n      const shouldScrollToTop = curDataLen.current >= data?.length;\n\n      onImageLoad(lastImage, () => {\n        setShowLoader(false);\n        onLoadRef.current && onLoadRef.current();\n\n        // тут, чтобы знать актуальный, а не тот,\n        // что был до момента загрузки галереи\n        const listTop = listRef.current?.getBoundingClientRect().top;\n\n        // полагаем, высота всех изображений в галерее одинаковая\n        if (listTop < 0) {\n          if (shouldScrollToTop) {\n            return listRef.current.scrollIntoView({\n              behavior: DEF_SCROLL_BEHAVIOR,\n            });\n          }\n\n          if (shouldAutoscroll) {\n            const scrollByNum = parseInt(scrollBy);\n            window.scrollBy({\n              top:\n                listItemHeight.current *\n                (isNaN(scrollByNum) ? DEF_SCROLL_BY : scrollByNum),\n              behavior: DEF_SCROLL_BEHAVIOR,\n            });\n          }\n        }\n      });\n    }\n    // запоминаем текущее\n    curDataLen.current = data?.length;\n  }, [data, scrollBy, listRef]);\n\n  return [showLoader];\n};\n","import { setProp, getProp } from 'utils';\n\nexport default class Cache {\n  #cache = {};\n\n  set(path, value) {\n    setProp(this.#cache, path, value);\n  }\n\n  get(path) {\n    return getProp(this.#cache, path);\n  }\n\n  get data() {\n    return { ...this.#cache };\n  }\n\n  clear() {\n    this.#cache = {};\n  }\n}\n","import axios from 'axios';\nimport { isObj, isArray, camelToSnake, normalizeStr } from '../../utils';\nimport Cache from './cache';\n\nconst cache = new Cache();\nlet controller;\n\nconst data = {\n  API_BASE_URL: 'https://api.themoviedb.org/3',\n  IMAGE_BASE_URL: 'https://image.tmdb.org/t/p',\n  TMDB_BASE_URL: 'https://www.themoviedb.org/movie',\n  IMDB_BASE_URL: 'https://www.imdb.com/title',\n  API_KEY: '86d04e898c465c8de09e1ea2fc383ab8',\n};\n\n//\n// TmdbService\n//\n\nexport default class TmdbService {\n  #response;\n  #instance;\n\n  constructor() {\n    if (this.#instance) return this.#instance;\n    this.#instance = this;\n  }\n\n  /**\n   *\n   * @param {*} relPath\n   * @param {*} size\n   * @returns\n   */\n  getImageUrl(relPath, size) {\n    const sz = isNaN(parseInt(size)) ? 'original' : `w${size}`;\n    return `${data.IMAGE_BASE_URL}/${sz}/${relPath}`;\n  }\n\n  getTmdbUrl(id) {\n    return `${data.TMDB_BASE_URL}/${id}`;\n  }\n\n  getImdbUrl(imdbId) {\n    return `${data.IMDB_BASE_URL}/${imdbId}`;\n  }\n\n  /**\n   *\n   * @param {*} url\n   * @returns\n   */\n  async fetch(url) {\n    controller = new AbortController();\n    const { signal } = controller;\n\n    try {\n      const resp = await axios.get(url, { signal });\n      return { ...(this.#response = resp) };\n      // error\n    } catch (err) {\n      this.#response = err;\n      throw err;\n    }\n  }\n\n  /**\n   *\n   * @param {*} path\n   * @param {*} params\n   * @returns\n   */\n  async get(path, params) {\n    const url = `${data.API_BASE_URL}/${path}?api_key=${\n      data.API_KEY\n    }&${new URLSearchParams(namesToSnake(params))}`;\n\n    return await this.fetch(url);\n  }\n\n  /**\n   *\n   * @param {array} ids - массив идентификаторов жанра\n   * @returns массив названий жанра для каждого идентификатора\n   */\n  async getGenres(ids) {\n    if (!isArray(ids)) return [];\n\n    if (!cache.get('genres')) {\n      const resp = await this.get(`genre/movie/list`);\n      cache.set('genres', resp.data.genres);\n    }\n\n    return cache\n      .get('genres')\n      .filter(({ id }) => ids.includes(id))\n      .map(({ name }) => name);\n  }\n\n  /**\n   *\n   * @param {*} period\n   * @param {*} params\n   * @returns\n   */\n  async getTrendingMovies(period, params) {\n    // не кешируем - грузятся страницами\n    const { data } = await this.get(\n      `trending/movie/${normalizeStr(period)}`,\n      params\n    );\n\n    return data;\n  }\n\n  /**\n   *\n   * @param {*} id\n   * @param {*} params\n   * @returns\n   */\n  async getMovieDetails(id, params) {\n    const cached = cache.get(`movie/${id}`);\n    if (cached) return cached;\n\n    const { data } = await this.get(`movie/${id}`, params);\n    cache.set(`movie/${id}`, data);\n\n    return data;\n  }\n\n  async getMovieCredits(id, params) {\n    const cached = cache.get(`movie/${id}/credits`);\n    if (cached) return cached;\n\n    const { data } = await this.get(`movie/${id}/credits`, params);\n    cache.set(`movie/${id}/credits`, data);\n\n    return data;\n  }\n\n  // не кешируем - грузятся страницами\n  async getMovieReviews(id, params) {\n    const { data } = await this.get(`movie/${id}/reviews`, params);\n    return data;\n  }\n\n  async searchMovies(query, params) {\n    const { data } = await this.get(`search/movie`, { query, ...params });\n    return data;\n  }\n\n  get cache() {\n    return cache.data;\n  }\n\n  abort() {\n    // controller.abort();\n  }\n}\n\n/**\n *\n * @param {object} obj\n * @returns - копию obj с именами свойств в snake_case\n */\nfunction namesToSnake(obj) {\n  return isObj(obj)\n    ? Object.entries(obj).reduce((res, [name, val]) => {\n        res[camelToSnake(name)] = val;\n        return res;\n      }, {})\n    : {};\n}\n"],"names":["data","onLoad","sortOptions","scrollBy","Loader","loader","listRef","useRef","useImageGallery","showLoader","hash","length","List","ref","map","id","restProps","Item","MovieGalleryItem","styled","srv","TmdbService","title","poster_path","vote_average","vote_count","overview","release_date","genre_ids","useState","wasLoaded","setWasLoaded","genres","setGenres","imgRef","onLoadRef","useEffect","getGenres","then","res","join","catch","showError","current","rating","toFixed","releaseYear","substring","Rating","MovieLink","to","AltTitle","SpinnerWrapper","Spinner","spinnerWidth","Poster","src","getImageUrl","alt","Overlay","Title","Genres","Overview","Link","NoPosterBg","FlexCentered","TransitionBase","width","strokeColor","strokeWidth","animationDuration","visible","propType","oneOfType","string","number","DEF_SCROLL_BEHAVIOR","setShowLoader","listItemHeight","curDataLen","firstElementChild","getBoundingClientRect","height","imgs","querySelectorAll","lastImage","shouldAutoscroll","shouldScrollToTop","onImageLoad","top","scrollIntoView","behavior","scrollByNum","parseInt","window","isNaN","Cache","path","value","setProp","this","getProp","controller","cache","relPath","size","sz","imdbId","url","AbortController","signal","axios","resp","params","URLSearchParams","obj","isObj","Object","entries","reduce","name","val","camelToSnake","fetch","ids","isArray","get","set","filter","includes","period","normalizeStr","cached","query"],"sourceRoot":""}
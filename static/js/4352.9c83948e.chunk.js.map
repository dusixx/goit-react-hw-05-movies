{"version":3,"file":"static/js/4352.9c83948e.chunk.js","mappings":"+NAGMA,EAAsB,SAGfC,EAAkB,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACvD,GAAoCC,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACMC,GAAYC,EAAAA,EAAAA,QAAOP,GACnBQ,GAAiBD,EAAAA,EAAAA,QAAO,MACxBE,GAAaF,EAAAA,EAAAA,QAAO,MAmD1B,OA/CAG,EAAAA,EAAAA,YAAU,WAAO,IAAD,QACdF,EAAeG,QAAf,UACEH,EAAeG,eADjB,kBAEEZ,EAAQY,eAFV,iBAEE,EAAiBC,yBAFnB,aAEE,EAAoCC,wBAAwBC,OAE9D,IAAMC,EAAI,UAAGhB,EAAQY,eAAX,aAAG,EAAiBK,iBAAiB,OAE/C,UAAID,QAAJ,IAAIA,GAAAA,EAAME,OAAQ,CAChBZ,GAAc,GACd,IAAMa,EAAYH,EAAKA,EAAKE,OAAS,GAG/BE,EAAmBV,EAAWE,SAAX,OAAqBV,QAArB,IAAqBA,OAArB,EAAqBA,EAAMgB,QAC9CG,EAAoBX,EAAWE,UAAX,OAAsBV,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAMgB,SAEtDI,EAAAA,EAAAA,aAAYH,GAAW,WAAO,IAAD,EAS3B,GARAb,GAAc,GACdC,EAAUK,SAAWL,EAAUK,WAIlB,UAAGZ,EAAQY,eAAX,aAAG,EAAiBE,wBAAwBS,KAG3C,EAAG,CACf,GAAIF,EACF,OAAOrB,EAAQY,QAAQY,eAAe,CACpCC,SAAU3B,IAId,GAAIsB,EAAkB,CACpB,IAAMM,EAAcC,SAASxB,GAC7ByB,OAAOzB,SAAS,CACdoB,IACEd,EAAeG,SACdiB,MAAMH,GA9CD,IA8CgCA,GACxCD,SAAU3B,GAEb,CACF,CACF,GACF,CAEDY,EAAWE,QAAX,OAAqBV,QAArB,IAAqBA,OAArB,EAAqBA,EAAMgB,MAC5B,GAAE,CAAChB,EAAMC,EAAUH,IAEb,CAACK,EACT,C","sources":["hooks/useImageGallery.js"],"sourcesContent":["import { useRef, useState, useEffect } from 'react';\nimport { onImageLoad } from 'utils';\n\nconst DEF_SCROLL_BEHAVIOR = 'smooth';\nconst DEF_SCROLL_BY = 1.5;\n\nexport const useImageGallery = ({ listRef, onLoad, data, scrollBy }) => {\n  const [showLoader, setShowLoader] = useState(false);\n  const onLoadRef = useRef(onLoad);\n  const listItemHeight = useRef(null);\n  const curDataLen = useRef(null);\n\n  // полагаем, галерея загружена,\n  // если загружено последнее изображение(не lazy)\n  useEffect(() => {\n    listItemHeight.current =\n      listItemHeight.current ??\n      listRef.current?.firstElementChild?.getBoundingClientRect().height;\n\n    const imgs = listRef.current?.querySelectorAll('img');\n\n    if (imgs?.length) {\n      setShowLoader(true);\n      const lastImage = imgs[imgs.length - 1];\n\n      // вычисляем тут, в колбеке уже будут равны (curDataLen.current === data.length)\n      const shouldAutoscroll = curDataLen.current < data?.length;\n      const shouldScrollToTop = curDataLen.current >= data?.length;\n\n      onImageLoad(lastImage, () => {\n        setShowLoader(false);\n        onLoadRef.current && onLoadRef.current();\n\n        // тут, чтобы знать актуальный, а не тот,\n        // что был до момента загрузки галереи\n        const listTop = listRef.current?.getBoundingClientRect().top;\n\n        // полагаем, высота всех изображений в галерее одинаковая\n        if (listTop < 0) {\n          if (shouldScrollToTop) {\n            return listRef.current.scrollIntoView({\n              behavior: DEF_SCROLL_BEHAVIOR,\n            });\n          }\n\n          if (shouldAutoscroll) {\n            const scrollByNum = parseInt(scrollBy);\n            window.scrollBy({\n              top:\n                listItemHeight.current *\n                (isNaN(scrollByNum) ? DEF_SCROLL_BY : scrollByNum),\n              behavior: DEF_SCROLL_BEHAVIOR,\n            });\n          }\n        }\n      });\n    }\n    // запоминаем текущее\n    curDataLen.current = data?.length;\n  }, [data, scrollBy, listRef]);\n\n  return [showLoader];\n};\n"],"names":["DEF_SCROLL_BEHAVIOR","useImageGallery","listRef","onLoad","data","scrollBy","useState","showLoader","setShowLoader","onLoadRef","useRef","listItemHeight","curDataLen","useEffect","current","firstElementChild","getBoundingClientRect","height","imgs","querySelectorAll","length","lastImage","shouldAutoscroll","shouldScrollToTop","onImageLoad","top","scrollIntoView","behavior","scrollByNum","parseInt","window","isNaN"],"sourceRoot":""}
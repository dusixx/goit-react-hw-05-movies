{"version":3,"file":"static/js/2663.1698b04f.chunk.js","mappings":"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","sources":["components/MovieGallery/MovieGalleryItem/MovieGalleryItem.jsx","components/MovieGallery/MovieGalleryItem/MovieGalleryItem.styled.jsx","components/etc/Spinner/Spinner.jsx","services/tmdb/cache.js","services/tmdb/tmdbSrv.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { func, arrayOf, number, string } from 'prop-types';\nimport { showError } from 'utils';\nimport TmdbService from 'services/tmdb/tmdbSrv';\nimport { Spinner } from 'components/etc/Spinner';\nimport { SpinnerWrapper } from 'styles/shared';\n\nimport {\n  Poster,\n  MovieLink,\n  Overlay,\n  Title,\n  Overview,\n  Rating,\n  Genres,\n  AltTitle,\n} from './MovieGalleryItem.styled';\n\nconst srv = new TmdbService();\nconst DEF_POSTER_WIDTH = 500;\nconst STR_NA = 'N/A';\n\n//\n// MovieGalleryItem\n//\n\nexport const MovieGalleryItem = ({\n  id,\n  title,\n  poster_path,\n  vote_average,\n  vote_count,\n  overview,\n  release_date,\n  genre_ids,\n  onLoad,\n  ...restProps\n}) => {\n  const [wasLoaded, setWasLoaded] = useState(false);\n  const [genres, setGenres] = useState(null);\n  const imgRef = useRef(null);\n  const onLoadRef = useRef(onLoad);\n\n  // имена жанров\n  useEffect(() => {\n    srv\n      .getGenres(genre_ids)\n      .then(res => setGenres(res.join(', ')))\n      .catch(showError);\n  }, [genre_ids, id, wasLoaded]);\n\n  // onLoad\n  useEffect(() => {\n    if (wasLoaded || !poster_path) {\n      onLoadRef.current && onLoadRef.current(imgRef.current);\n    }\n  }, [wasLoaded, poster_path]);\n\n  const rating = vote_average ? vote_average.toFixed(1) : STR_NA;\n  const releaseYear = release_date?.substring(0, 4);\n\n  return (\n    <>\n      {(wasLoaded || !poster_path) && (\n        <Rating title={`Votes: ${vote_count}`}>{rating}</Rating>\n      )}\n\n      <MovieLink to={`/movies/${id}`}>\n        {!poster_path && (\n          <AltTitle>\n            {title}\n            {releaseYear && ` (${releaseYear})`}\n          </AltTitle>\n        )}\n\n        {poster_path && (\n          <>\n            {!wasLoaded && (\n              <SpinnerWrapper>\n                <Spinner spinnerWidth={35} />\n              </SpinnerWrapper>\n            )}\n            <Poster\n              ref={imgRef}\n              src={srv.getImageUrl(poster_path, DEF_POSTER_WIDTH)}\n              alt={title}\n              onLoad={() => setWasLoaded(true)}\n            />\n          </>\n        )}\n\n        <Overlay data-overlay>\n          {title && (\n            <Title>\n              {title}\n              {releaseYear && ` (${releaseYear})`}\n            </Title>\n          )}\n          {genres && <Genres>{genres}</Genres>}\n          {overview && <Overview>{overview}</Overview>}\n        </Overlay>\n      </MovieLink>\n    </>\n  );\n};\n\nMovieGalleryItem.propTypes = {\n  onLoad: func,\n  genre_ids: arrayOf(number),\n  title: string,\n  poster_path: string,\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nimport { FlexCentered, NoPosterBg, TransitionBase } from 'styles/shared';\n\nexport const MovieLink = styled(Link)`\n  ${NoPosterBg}\n\n  position: relative;\n\n  display: block;\n  width: 100%;\n  height: 100%;\n\n  color: var(--color-gray-lighter);\n  border-radius: var(--border-radius);\n  overflow: hidden;\n\n  &:hover,\n  &:focus-visible {\n    & [data-overlay] {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Rating = styled.span`\n  ${FlexCentered()};\n\n  position: absolute;\n  top: 15px;\n  right: -5px;\n  z-index: 9;\n\n  padding-left: 7px;\n  padding-right: 7px;\n  height: 20px;\n\n  font-size: 16px;\n  line-height: 0;\n\n  @media screen and (max-width: 320px),\n    (min-width: 555px) and (max-width: 650px),\n    (min-width: 800px) and (max-width: 900px) {\n    font-size: 14px;\n    padding: 0 4px 0 4px;\n  }\n\n  background-color: var(--color-orange);\n  border-radius: calc(var(--border-radius) * 0.5);\n  color: white;\n`;\n\nexport const Poster = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n\nexport const Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n\n  /* \n    Не будет выпадать маржин, например, у Overview\n    Паддинги работают для всего контента, в тч для Overview\n  */\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n\n  width: 100%;\n  height: 100%;\n\n  padding: 20px;\n  padding-bottom: 30px;\n\n  @media screen and (max-width: 320px),\n    (min-width: 555px) and (max-width: 650px),\n    (min-width: 800px) and (max-width: 900px) {\n    gap: 10px;\n  }\n\n  ${TransitionBase('opacity')};\n\n  background-color: rgb(0 0 0 / 0.8);\n  opacity: 0;\n`;\n\nexport const Title = styled.h2`\n  padding-right: 25px;\n\n  font-size: 24px;\n  line-height: 1.1;\n  letter-spacing: -0.2px;\n\n  overflow-wrap: break-word;\n\n  @media screen and (max-width: 320px),\n    (min-width: 555px) and (max-width: 650px),\n    (min-width: 800px) and (max-width: 900px) {\n    font-size: 16px;\n  }\n`;\n\nexport const AltTitle = styled.h3`\n  padding: 20px;\n  padding-right: 50px;\n\n  font-family: Arial Black;\n  font-size: 18px;\n  letter-spacing: -0.5px;\n\n  color: rgb(0 0 0 / 0.2);\n  overflow-wrap: break-word;\n\n  @media screen and (max-width: 320px),\n    (min-width: 555px) and (max-width: 650px),\n    (min-width: 800px) and (max-width: 900px) {\n    font-size: 16px;\n  }\n`;\n\nexport const Genres = styled.p`\n  font-size: 14px;\n  color: var(--color-orange);\n\n  @media screen and (max-width: 320px),\n    (min-width: 555px) and (max-width: 650px),\n    (min-width: 800px) and (max-width: 900px) {\n    font-size: 12px;\n  }\n`;\n\nexport const Overview = styled.p`\n  height: 100%;\n  padding-right: 5px;\n\n  font-size: 13px;\n  line-height: 1.1;\n\n  @media screen and (max-width: 320px),\n    (min-width: 555px) and (max-width: 650px),\n    (min-width: 800px) and (max-width: 900px) {\n    font-size: 11px;\n  }\n\n  color: rgba(255 255 255 / 0.5);\n  overflow: auto;\n\n  /* Custom scroll */\n  ::-webkit-scrollbar {\n    width: 3px;\n\n    &-track {\n      background: #f1f1f1;\n    }\n    &-thumb {\n      background: var(--color-blue);\n    }\n    &-thumb:hover {\n      background: var(--color-blue-light);\n    }\n  }\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { number, oneOfType, string } from 'prop-types';\n\nexport const Spinner = ({ width = 40, ...restProps }) => (\n  <RotatingLines\n    strokeColor=\"black\"\n    strokeWidth=\"3\"\n    animationDuration=\"0.75\"\n    width={width}\n    visible={true}\n    {...restProps}\n  />\n);\n\nSpinner.propType = {\n  width: oneOfType([string, number]),\n};\n","import { setProp, getProp } from 'utils';\n\nexport default class Cache {\n  #cache = {};\n\n  set(path, value) {\n    setProp(this.#cache, path, value);\n  }\n\n  get(path) {\n    return getProp(this.#cache, path);\n  }\n\n  get data() {\n    return { ...this.#cache };\n  }\n\n  clear() {\n    this.#cache = {};\n  }\n}\n","import axios from 'axios';\nimport { isObj, isArray, camelToSnake, normalizeStr } from '../../utils';\nimport Cache from './cache';\n\nconst cache = new Cache();\n// let controller;\n\nconst data = {\n  API_BASE_URL: 'https://api.themoviedb.org/3',\n  IMAGE_BASE_URL: 'https://image.tmdb.org/t/p',\n  TMDB_BASE_URL: 'https://www.themoviedb.org/movie',\n  IMDB_BASE_URL: 'https://www.imdb.com/title',\n  API_KEY: '86d04e898c465c8de09e1ea2fc383ab8',\n};\n\n//\n// TmdbService\n//\n\nexport default class TmdbService {\n  #response;\n  #instance;\n\n  constructor() {\n    if (this.#instance) return this.#instance;\n    this.#instance = this;\n  }\n\n  /**\n   *\n   * @param {*} relPath\n   * @param {*} size\n   * @returns\n   */\n  getImageUrl(relPath, size) {\n    const sz = isNaN(parseInt(size)) ? 'original' : `w${size}`;\n    return `${data.IMAGE_BASE_URL}/${sz}/${relPath}`;\n  }\n\n  getTmdbUrl(id) {\n    return `${data.TMDB_BASE_URL}/${id}`;\n  }\n\n  getImdbUrl(imdbId) {\n    return `${data.IMDB_BASE_URL}/${imdbId}`;\n  }\n\n  /**\n   *\n   * @param {*} url\n   * @returns\n   */\n  async fetch(url) {\n    // controller = new AbortController();\n    // const { signal } = controller;\n\n    try {\n      const resp = await axios.get(url /* { signal } */);\n      return { ...(this.#response = resp) };\n      // error\n    } catch (err) {\n      this.#response = err;\n      throw err;\n    }\n  }\n\n  /**\n   *\n   * @param {*} path\n   * @param {*} params\n   * @returns\n   */\n  async get(path, params) {\n    const url = `${data.API_BASE_URL}/${path}?api_key=${\n      data.API_KEY\n    }&${new URLSearchParams(namesToSnake(params))}`;\n\n    return await this.fetch(url);\n  }\n\n  /**\n   *\n   * @param {array} ids - массив идентификаторов жанра\n   * @returns массив названий жанра для каждого идентификатора\n   */\n  async getGenres(ids) {\n    if (!isArray(ids)) return [];\n\n    if (!cache.get('genres')) {\n      const resp = await this.get(`genre/movie/list`);\n      cache.set('genres', resp.data.genres);\n    }\n\n    return cache\n      .get('genres')\n      .filter(({ id }) => ids.includes(id))\n      .map(({ name }) => name);\n  }\n\n  /**\n   *\n   * @param {*} period\n   * @param {*} params\n   * @returns\n   */\n  async getTrendingMovies(period, params) {\n    // не кешируем - грузятся страницами\n    const { data } = await this.get(\n      `trending/movie/${normalizeStr(period)}`,\n      params\n    );\n\n    return data;\n  }\n\n  /**\n   *\n   * @param {*} id\n   * @param {*} params\n   * @returns\n   */\n  async getMovieDetails(id, params) {\n    const cached = cache.get(`movie/${id}`);\n    if (cached) return cached;\n\n    const { data } = await this.get(`movie/${id}`, params);\n    cache.set(`movie/${id}`, data);\n\n    return data;\n  }\n\n  async getMovieCredits(id, params) {\n    const cached = cache.get(`movie/${id}/credits`);\n    if (cached) return cached;\n\n    const { data } = await this.get(`movie/${id}/credits`, params);\n    cache.set(`movie/${id}/credits`, data);\n\n    return data;\n  }\n\n  // не кешируем - грузятся страницами\n  async getMovieReviews(id, params) {\n    const { data } = await this.get(`movie/${id}/reviews`, params);\n    return data;\n  }\n\n  async searchMovies(query, params) {\n    const { data } = await this.get(`search/movie`, { query, ...params });\n    return data;\n  }\n\n  get cache() {\n    return cache.data;\n  }\n\n  // abort() {\n  //   controller.abort();\n  // }\n}\n\n/**\n *\n * @param {object} obj\n * @returns - копию obj с именами свойств в snake_case\n */\nfunction namesToSnake(obj) {\n  return isObj(obj)\n    ? Object.entries(obj).reduce((res, [name, val]) => {\n        res[camelToSnake(name)] = val;\n        return res;\n      }, {})\n    : {};\n}\n"],"names":["srv","TmdbService","MovieGalleryItem","id","title","poster_path","vote_average","vote_count","overview","release_date","genre_ids","onLoad","useState","wasLoaded","setWasLoaded","genres","setGenres","imgRef","useRef","onLoadRef","useEffect","getGenres","then","res","join","catch","showError","current","rating","toFixed","releaseYear","substring","Rating","MovieLink","to","AltTitle","SpinnerWrapper","Spinner","spinnerWidth","Poster","ref","src","getImageUrl","alt","Overlay","Title","Genres","Overview","styled","Link","NoPosterBg","FlexCentered","TransitionBase","width","restProps","strokeColor","strokeWidth","animationDuration","visible","propType","oneOfType","string","number","Cache","path","value","setProp","this","getProp","cache","data","relPath","size","sz","isNaN","parseInt","imdbId","url","axios","resp","params","URLSearchParams","obj","isObj","Object","entries","reduce","name","val","camelToSnake","fetch","ids","isArray","get","set","filter","includes","map","period","normalizeStr","cached","query"],"sourceRoot":""}
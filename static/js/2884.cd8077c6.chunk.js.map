{"version":3,"file":"static/js/2884.cd8077c6.chunk.js","mappings":"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","sources":["components/ErrorMessage/ErrorMessage.jsx","components/MovieCard/About/About.jsx","components/MovieCard/About/About.styled.jsx","components/MovieCard/MovieCard.jsx","components/MovieCard/MovieCard.styled.jsx","components/MovieCard/Rating/Rating.jsx","components/MovieCard/Rating/Rating.styled.jsx","components/MovieCard/Reviews/Reviews.jsx","components/MovieCard/Reviews/Reviews.styled.jsx","components/etc/BodyScrollLock/BodyScrollLock.jsx","components/etc/HashBtnLink/HashBtnLink.jsx","components/etc/LoadMoreBtn/LoadMoreBtn.jsx","components/etc/LoadMoreBtn/LoadMoreBtn.styled.jsx","components/etc/ModalImage/Modal/Modal.jsx","components/etc/ModalImage/Modal/Modal.styled.jsx","components/etc/ModalImage/ModalImage.jsx","components/etc/ModalImage/ModalImage.styled.jsx","components/etc/Spinner/Spinner.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import { LinkButton } from 'styles/shared';\nimport { Caption, Container, Text } from './ErrorMessage.styled';\nimport { IconError } from 'styles/icons';\nimport { shape, string } from 'prop-types';\n\nexport const ErrorMessage = ({ error }) => {\n  console.error(error);\n\n  return (\n    <Container>\n      <IconError size={40} color=\"var(--color-blue)\" />\n      <Caption>Something went wrong</Caption>\n      <Text>{error.code}</Text>\n      <LinkButton to=\"/\" style={{ textTransform: 'capitalize' }}>\n        Go to the homepage\n      </LinkButton>\n      {/* <LinkButton to={-1} style={{ textTransform: 'capitalize' }}>\n        Go back\n      </LinkButton> */}\n    </Container>\n  );\n};\n\nErrorMessage.propType = {\n  error: shape({\n    message: string,\n    code: string,\n  }),\n};\n","import { arrayOf, number, object, string } from 'prop-types';\nimport { useEffect, useRef, useState } from 'react';\nimport { LinkPrimary } from 'styles/shared';\nimport { splitNumIntoTriads } from 'utils';\n\nimport {\n  List,\n  Item,\n  Container,\n  Title,\n  Tagline,\n  Label,\n  Cast,\n} from './About.styled';\n\n//\n// About\n//\n\nexport const About = ({\n  budget,\n  revenue,\n  production_countries = [],\n  genres = [],\n  homepage,\n  overview,\n  release_date,\n  tagline,\n  crew,\n  cast,\n  runtime,\n  ...restProps\n}) => {\n  const listRef = useRef(null);\n  const [shouldRender, setShouldRender] = useState(true);\n\n  useEffect(() => {\n    setShouldRender(listRef.current?.children.length > 0);\n  }, []);\n\n  const genresList = genres?.length\n    ? genres.map(({ name }) => name).join(', ')\n    : null;\n\n  const countries = production_countries?.length\n    ? production_countries.map(({ name }) => name).join(', ')\n    : null;\n\n  const releaseDate = release_date\n    ? new Date(release_date).toLocaleDateString()\n    : null;\n\n  const runtimeHHMM =\n    runtime &&\n    `${new Date(runtime * 60000)\n      .toISOString()\n      .substr(11, 5)\n      .replace(':', 'h ')}m`;\n\n  if (!shouldRender) return null;\n\n  return (\n    <Container>\n      <Title>About</Title>\n\n      <List ref={listRef} {...restProps}>\n        {releaseDate && (\n          <Item>\n            <Label>release</Label>\n            <span>{releaseDate}</span>\n          </Item>\n        )}\n\n        {countries && (\n          <Item>\n            <Label>countries</Label>\n            <span>{countries}</span>\n          </Item>\n        )}\n\n        {genresList && (\n          <Item>\n            <Label>genres</Label>\n            <span>{genresList}</span>\n          </Item>\n        )}\n\n        {tagline && (\n          <Item>\n            <Label>tagline</Label>\n            <span>\n              <Tagline>{tagline}</Tagline>\n            </span>\n          </Item>\n        )}\n\n        {budget > 0 && (\n          <Item>\n            <Label>budget</Label>\n            <span>${splitNumIntoTriads(budget)}</span>\n          </Item>\n        )}\n\n        {revenue > 0 && (\n          <Item>\n            <Label>revenue</Label>\n            <span>${splitNumIntoTriads(revenue)}</span>\n          </Item>\n        )}\n\n        {crew &&\n          Object.entries(crew).map(([jobName, persons]) => {\n            return (\n              persons.length > 0 && (\n                <Item key={jobName}>\n                  <Label>{jobName}</Label>\n                  <span>{persons.join(', ')}</span>\n                </Item>\n              )\n            );\n          })}\n\n        {cast && (\n          <Item>\n            <Label>cast</Label>\n            <Cast>\n              {cast.preview}\n              <LinkPrimary to=\"credits\">{cast.remaining}</LinkPrimary>\n            </Cast>\n          </Item>\n        )}\n\n        {runtime > 0 && (\n          <Item>\n            <Label>runtime</Label>\n            <span>{runtimeHHMM}</span>\n          </Item>\n        )}\n      </List>\n    </Container>\n  );\n};\n\nAbout.propType = {\n  budget: number,\n  revenue: number,\n  runtime: number,\n  production_countries: arrayOf(object),\n  genres: arrayOf(object),\n  cast: object,\n  crew: object,\n  release_date: string,\n  tagline: string,\n};\n","import styled from '@emotion/styled';\nimport { Subtitle } from 'styles/shared';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  line-height: 1.3;\n\n  @media screen and (min-width: 768px) {\n    align-items: initial;\n  }\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n  max-width: 700px;\n\n  @media screen and (min-width: 768px) {\n    align-items: initial;\n  }\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 5px;\n\n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n    align-items: initial;\n    gap: 20px;\n  }\n\n  & span {\n    text-align: center;\n    @media screen and (min-width: 768px) {\n      text-align: left;\n    }\n  }\n`;\n\nexport const Label = styled.span`\n  width: 100px;\n  flex-shrink: 0;\n\n  font-weight: bold;\n  letter-spacing: -0.2px;\n  text-transform: capitalize;\n\n  &::after {\n    content: ':';\n  }\n`;\n\nexport const Cast = styled.p`\n  text-align: center;\n\n  @media screen and (min-width: 768px) {\n    text-align: left;\n  }\n`;\n\nexport const Tagline = styled.span`\n  font-style: italic;\n  font-weight: 400;\n  color: gray;\n`;\n\nexport const Title = styled(Subtitle)`\n  margin-top: 35px;\n  margin-bottom: 20px;\n`;\n","import { useState } from 'react';\nimport { object, string } from 'prop-types';\nimport { Rating } from './Rating/Rating';\nimport { About } from './About/About';\nimport { Reviews } from './Reviews/Reviews';\nimport { getCrewPreview, getCastPreview } from 'services/tmdb/helpers';\nimport { ModalImage } from 'components/etc/ModalImage/ModalImage';\nimport { ExpandableContent } from 'components/etc/ExpandableContent';\nimport { Spinner } from 'components/etc/Spinner';\nimport { SpinnerWrapper } from 'styles/shared';\nimport TmdbService from 'services/tmdb/tmdbSrv';\n\nimport {\n  Card,\n  Info,\n  PosterLink,\n  Poster,\n  Desc,\n  MovieTitle,\n  OriginalTitle,\n  WellKnownTitle,\n  CastAndCrewLink,\n  Title,\n  Homepage,\n  Overview,\n} from './MovieCard.styled';\n\nconst srv = new TmdbService();\nconst POSTER_WIDTH = 500;\nconst OVERVIEW_MAX_HEIGHT = 100;\nconst NEW_TAB = { target: '_blank', rel: 'noopener noreferrer' };\n\n//\n// Movie card\n//\n\nexport const MovieCard = ({ data = {} }) => {\n  // деструктурируем тут, чтобы не извлекать общие пропы\n  const {\n    original_title,\n    title,\n    poster_path,\n    credits,\n    reviews,\n    homepage,\n    overview,\n    ...restProps\n  } = data;\n\n  const [showModal, setShowModal] = useState(false);\n  const [wasLoaded, setWasLoaded] = useState(false);\n\n  const handleImageClick = (e, path) => {\n    e.preventDefault();\n    setShowModal(true);\n  };\n\n  // original_title - название на языке оригинала (например, китайский)\n  let movieTitle = title || original_title;\n\n  // постер\n  const posterData = {\n    original: srv.getImageUrl(poster_path),\n    src: srv.getImageUrl(poster_path, POSTER_WIDTH),\n    alt: movieTitle,\n  };\n\n  // год релиза\n  const releaseYear = data.release_date?.substring(0, 4);\n  const reviewsCount = reviews?.total_results;\n\n  const cast = getCastPreview(credits);\n  const crew = getCrewPreview(credits);\n\n  return (\n    <Card>\n      <Info>\n        {/* !! id(359246) изображение не втиснуто */}\n        <PosterLink\n          to={posterData.original}\n          onClick={handleImageClick}\n          clickable={poster_path}\n        >\n          {poster_path && (\n            <>\n              {!wasLoaded && (\n                <SpinnerWrapper>\n                  <Spinner spinnerWidth={40} />\n                </SpinnerWrapper>\n              )}\n              <Poster {...posterData} onLoad={() => setWasLoaded(true)} />\n            </>\n          )}\n        </PosterLink>\n\n        {movieTitle && (\n          <Desc>\n            <MovieTitle>\n              <WellKnownTitle>\n                {movieTitle}\n                {releaseYear && ` (${releaseYear})`}\n              </WellKnownTitle>\n\n              {/* Пример id(107406) id(569938) */}\n              {movieTitle !== original_title && (\n                <OriginalTitle> {original_title}</OriginalTitle>\n              )}\n            </MovieTitle>\n\n            <Rating reviewsCount={reviewsCount} {...restProps} />\n\n            <About cast={cast} crew={crew} {...restProps} />\n\n            {/* Пример без credits id(874156) */}\n            {(cast || crew) && (\n              <CastAndCrewLink to=\"credits\">Full cast & crew</CastAndCrewLink>\n            )}\n\n            {homepage && (\n              <Homepage to={homepage} title={homepage} {...NEW_TAB}>\n                Official website\n              </Homepage>\n            )}\n\n            {overview && (\n              <Overview>\n                <Title>Overview</Title>\n                <ExpandableContent\n                  content={overview}\n                  maxHeight={OVERVIEW_MAX_HEIGHT}\n                />\n              </Overview>\n            )}\n          </Desc>\n        )}\n      </Info>\n\n      {reviewsCount > 0 && <Reviews data={reviews} />}\n\n      <ModalImage\n        visible={showModal}\n        onClose={() => setShowModal(false)}\n        src={posterData.original}\n        alt={posterData.alt}\n      />\n    </Card>\n  );\n};\n\nMovieCard.propType = {\n  original_title: string,\n  title: string,\n  poster_path: string,\n  credits: object,\n  reviews: object,\n  homepage: string,\n  overview: string,\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nimport { LinkBase, LinkPrimary } from 'styles/shared';\n\nimport {\n  Title as TitleShared,\n  TransitionBase,\n  NoPosterBg,\n  Subtitle,\n} from 'styles/shared';\n\nconst HEADER_HEIGHT = '58px';\nconst POSTER_HMULT = 1.5;\n\nexport const Card = styled.article``;\n\nexport const Info = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n  margin-top: 10px;\n\n  @media screen and (min-width: 768px) {\n    align-items: initial;\n    flex-direction: row;\n    gap: 30px;\n  }\n`;\n\nexport const PosterLink = styled(Link)`\n  position: relative;\n  flex-shrink: 0;\n\n  cursor: ${({ clickable }) => (clickable ? 'pointer' : 'auto')};\n  pointer-events: ${({ clickable }) => (clickable ? 'all' : 'none')};\n\n  width: 90vw;\n  height: calc(90vw * ${POSTER_HMULT});\n\n  border-radius: var(--border-radius);\n  overflow: hidden;\n\n  ${NoPosterBg}\n\n  @media screen and (min-width: 768px) {\n    position: sticky;\n    top: 40px; // ${HEADER_HEIGHT};\n    width: 330px;\n    height: calc(330px * ${POSTER_HMULT});\n  }\n`;\n\nexport const Poster = styled.img`\n  ${TransitionBase('filter')};\n\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n\n  /* Сюда вместо ссылки - чтобы не cработывало для заглушек */\n  &:hover,\n  &:focus-visible {\n    filter: brightness(1.1);\n  }\n`;\n\nexport const Desc = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  @media screen and (min-width: 768px) {\n    align-items: initial;\n  }\n`;\n\nexport const MovieTitle = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  margin-bottom: 30px;\n`;\n\nexport const WellKnownTitle = styled(TitleShared)`\n  font-size: 38px;\n  text-align: center;\n\n  @media screen and (min-width: 768px) {\n    max-width: 700px;\n    text-align: left;\n  }\n`;\n\nexport const OriginalTitle = styled.h3`\n  font-size: 15px;\n  letter-spacing: -0.3px;\n\n  color: rgb(0 0 0 / 0.3);\n  text-align: center;\n\n  @media screen and (min-width: 768px) {\n    text-align: left;\n  }\n`;\n\nexport const CastAndCrewLink = styled(LinkPrimary)`\n  display: flex;\n  align-items: center;\n  width: max-content;\n\n  padding: 5px;\n  padding-left: 0;\n  margin-top: 25px;\n\n  text-transform: capitalize;\n`;\n\nexport const Homepage = styled(Link)`\n  ${LinkBase};\n\n  display: block;\n  width: 150px;\n  margin-top: 20px;\n  padding: 10px;\n\n  text-transform: capitalize;\n  text-align: center;\n\n  color: var(--color-blue);\n  border: 2px solid var(--color-blue);\n  border-radius: var(--border-radius);\n\n  ${TransitionBase('color background-color')};\n\n  &:hover,\n  &:focus-visible {\n    background-color: var(--color-blue);\n    color: white;\n  }\n`;\n\nexport const Overview = styled.div`\n  line-height: 1.5;\n`;\n\nexport const Title = styled(Subtitle)`\n  text-align: center;\n  margin-top: 35px;\n  margin-bottom: 20px;\n\n  @media screen and (min-width: 768px) {\n    text-align: left;\n  }\n`;\n","import { number, oneOfType, string } from 'prop-types';\nimport { IconImdbLogo, IconTmdbLogo } from 'styles/icons';\nimport { HashBtnLink } from 'components/etc/HashBtnLink/HashBtnLink';\nimport TmdbService from 'services/tmdb/tmdbSrv';\nimport { shortenNum } from 'utils';\n\nimport {\n  VoteAverage,\n  TmdbLink,\n  ImdbLink,\n  Ratings,\n  Stat,\n} from './Rating.styled';\n\nconst srv = new TmdbService();\nconst DEF_HEIGHT = 40;\nconst NEW_TAB = { target: '_blank', rel: 'noopener noreferrer' };\n\n//\n// Rating\n//\n\nexport const Rating = ({\n  height = DEF_HEIGHT,\n  vote_average,\n  vote_count,\n  popularity,\n  imdb_id,\n  reviewsCount,\n  id,\n  ...restProps\n}) => {\n  let rating = Number(vote_average);\n  rating = rating ? rating.toFixed(1) : 'N/A';\n\n  const tmdbUrl = srv.getTmdbUrl(id);\n  const imdbUrl = srv.getImdbUrl(imdb_id);\n  const tmdbData = { to: tmdbUrl, title: tmdbUrl, height, ...NEW_TAB };\n  const imdbData = { to: imdbUrl, title: imdbUrl, height, ...NEW_TAB };\n\n  return (\n    <Ratings>\n      <VoteAverage {...tmdbData}>{rating}</VoteAverage>\n      {imdb_id && (\n        <ImdbLink {...imdbData}>\n          <IconImdbLogo />\n        </ImdbLink>\n      )}\n      <TmdbLink {...tmdbData}>\n        <IconTmdbLogo size={height} title={tmdbUrl} />\n      </TmdbLink>\n\n      {vote_count > 0 && (\n        <Stat>\n          <span>{shortenNum(vote_count)}</span> votes\n        </Stat>\n      )}\n\n      {reviewsCount > 0 && (\n        <HashBtnLink to=\"#reviews\" style={{ padding: '5px 5px 5px 0' }}>\n          <span>{reviewsCount}</span> review(s)\n        </HashBtnLink>\n      )}\n    </Ratings>\n  );\n};\n\nRating.propType = {\n  height: oneOfType([string, number]),\n  vote_average: number,\n  vote_count: number,\n  popularity: number,\n  imdb_id: string,\n  reviewsCount: number,\n  id: number,\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nimport { FlexCentered, TransitionBase } from 'styles/shared';\nimport { calcCSSValue } from 'utils';\n\nexport const Ratings = styled.div`\n  ${FlexCentered('gap: 15px; flex-wrap: wrap;')};\n\n  @media screen and (min-width: 768px) {\n    justify-content: initial;\n  }\n`;\n\nconst Tag = styled(Link)`\n  ${FlexCentered()};\n  ${TransitionBase('filter')};\n\n  height: ${({ height }) => calcCSSValue(height)};\n  border-radius: var(--border-radius);\n  color: white;\n\n  &:hover,\n  &:focus-visible {\n    filter: brightness(1.05);\n  }\n`;\n\nexport const VoteAverage = styled(Tag)`\n  padding: 0 10px 0 10px;\n  font-family: Arial Black;\n  font-size: 22px;\n  line-height: 0;\n  background-color: var(--color-orange);\n`;\n\nexport const ImdbLink = styled(Tag)`\n  padding: 0 7px 0 7px;\n  background-color: var(--color-imdb-yellow);\n\n  & svg {\n    height: 60%;\n  }\n`;\n\nexport const Stat = styled.span`\n  font-size: 14px;\n  & span {\n    font-weight: bold;\n  }\n`;\n\nexport const TmdbLink = styled(Tag)`\n  padding: 0 7px 0 7px;\n  background: var(--color-tmdb-gradient);\n\n  & svg {\n    height: 100%;\n  }\n`;\n","import { useState, useRef } from 'react';\nimport { showError } from 'utils';\nimport TmdbService from 'services/tmdb/tmdbSrv';\nimport { ReviewItem } from './ReviewItem/ReviewItem';\nimport { List, Container, Title, Item } from './Reviews.styled';\nimport { LoadMoreBtn } from 'components/etc/LoadMoreBtn/LoadMoreBtn';\nimport { array, number, shape } from 'prop-types';\nimport { useAutoScroll } from 'hooks';\n\nconst srv = new TmdbService();\n\n//\n// Reviews\n//\n\nexport const Reviews = ({ data: { id, results, total_pages } }) => {\n  const [reviews, setReviews] = useState(results);\n  const page = useRef(1);\n  const listRef = useRef(null);\n\n  useAutoScroll({ listRef, data: reviews, scrollBy: 1 });\n\n  const handleLoadMoreClick = clickCount => {\n    srv\n      .getMovieReviews(id, { page: (page.current = clickCount) })\n      .then(({ results }) => setReviews(cur => [...cur, ...results]))\n      .catch(showError);\n  };\n\n  return (\n    <Container>\n      <Title>Reviews</Title>\n\n      <List id=\"reviews\" ref={listRef}>\n        {reviews.map(({ id, ...rest }) => {\n          return (\n            <Item key={id}>\n              <ReviewItem {...rest} />\n            </Item>\n          );\n        })}\n      </List>\n\n      {total_pages > 0 && page.current < total_pages && (\n        <LoadMoreBtn onClick={handleLoadMoreClick} />\n      )}\n    </Container>\n  );\n};\n\nReviews.propType = {\n  data: shape({\n    id: number,\n    results: array,\n    total_pages: number,\n  }),\n};\n","import styled from '@emotion/styled';\nimport { Subtitle } from 'styles/shared';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 30px;\n\n  @media screen and (min-width: 768px) {\n    align-items: flex-start;\n  }\n\n  margin-top: 40px;\n  border-top: 1px solid lightgray;\n`;\n\nexport const Title = styled(Subtitle)`\n  margin-top: 30px;\n`;\n\nexport const Item = styled.li`\n  width: 100%;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  width: 100%;\n`;\n","import { useEffect } from 'react';\nimport { isVScrollBarVisible } from 'utils';\n\nconst { body } = document;\nconst root = document.documentElement;\n\nexport const BodyScrollLock = () => {\n  useEffect(() => {\n    const top = window.scrollY;\n    const bodyCSSText = body.style.cssText;\n\n    body.style.cssText = `\n        ${bodyCSSText};\n        position: fixed;\n        top: -${top}px;\n        width: 100%;\n        overflow-y: ${isVScrollBarVisible() ? `scroll` : `hidden`};\n      `;\n\n    return () => {\n      body.style.cssText = bodyCSSText;\n\n      // предотвращаем автоскролинг\n      root.style.scrollBehavior = 'auto';\n      window.scrollTo({ top });\n      root.style.removeProperty('scroll-behavior');\n    };\n  }, []);\n};\n\nexport default BodyScrollLock;\n","import { ButtonLink } from 'styles/shared';\nimport { useEffect, useRef } from 'react';\nimport { string, shape } from 'prop-types';\n\nconst DEF_SCROLL_OPTS = {\n  behavior: 'smooth',\n  block: 'nearest',\n  inline: 'nearest',\n};\n\n/**\n *\n *  @param to - любой валидный селектор\n *  @param scrollOptions - параметры для scrollIntoView\n */\nexport const HashBtnLink = ({\n  to,\n  children,\n  scrollOptions = DEF_SCROLL_OPTS,\n  ...restProps\n}) => {\n  const target = useRef(null);\n\n  useEffect(() => {\n    target.current = document.querySelector(String(to) || null);\n  }, [to]);\n\n  return (\n    <ButtonLink\n      onClick={() => target.current?.scrollIntoView(scrollOptions)}\n      {...restProps}\n    >\n      {children}\n    </ButtonLink>\n  );\n};\n\nHashBtnLink.propType = {\n  to: string,\n  scrollOptions: shape({\n    behavior: string,\n    block: string,\n    inline: string,\n  }),\n};\n","import { useEffect, useRef, useState } from 'react';\nimport { Button, Spinner } from './LoadMoreBtn.styled';\nimport { func, bool } from 'prop-types';\n\nconst BTN_TITLE = 'Load more';\n\n//\n// LoadMoreBtn\n//\n\nexport const LoadMoreBtn = ({ onClick, centered = true, ...restProps }) => {\n  const [showLoader, setShowLoader] = useState(false);\n  const btnRef = useRef(null);\n  const btnRect = useRef(null);\n  const observer = useRef(null);\n  const clickCount = useRef(1);\n\n  useEffect(() => {\n    const { current: ref } = btnRef;\n    observer.current = new IntersectionObserver(() => setShowLoader(false));\n    observer.current.observe(ref);\n\n    // фактический размер, чтобы спинер не изменял габариты кнопки\n    // Иначе, надо жестко задать размеры кнопки в стилях\n    btnRect.current = btnRef.current.getBoundingClientRect();\n\n    return () => observer.current.unobserve(ref);\n  }, []);\n\n  const handleClick = e => {\n    setShowLoader(true);\n    clickCount.current += 1;\n    onClick && onClick(clickCount.current, e);\n  };\n\n  const { width, height } = btnRect.current || '';\n  const btnProps = { width, height, ...restProps };\n\n  return (\n    <Button\n      ref={btnRef}\n      onClick={handleClick}\n      centered={centered}\n      isLoading={showLoader}\n      {...btnProps}\n    >\n      {showLoader ? <Spinner size={height * 0.5} /> : BTN_TITLE}\n    </Button>\n  );\n};\n\nLoadMoreBtn.propType = {\n  onClick: func,\n  centered: bool,\n};\n","import styled from '@emotion/styled';\nimport { ButtonSecondary, FlexCentered } from 'styles/shared';\nimport { calcCSSValue } from 'utils';\n\nexport const Button = styled(ButtonSecondary)`\n  ${FlexCentered()};\n\n  margin-left: ${({ centered }) => (centered ? 'auto' : 0)};\n  margin-right: ${({ centered }) => (centered ? 'auto' : 0)};\n\n  width: ${({ width }) => calcCSSValue(width)};\n  height: ${({ height }) => calcCSSValue(height)};\n\n  /*\n    Пока кнопка со спинером - не убираем цвето фона\n    Иначе, спиннер сольется с фоном страницы\n    Можно сдлеать, чтобы цвет спиннера менялся на прозрачном фоне\n  */\n  background-color: ${({ isLoading }) =>\n    isLoading ? 'var(--color-blue)' : 'transparent'};\n`;\n\nexport const Spinner = styled.span`\n  display: inline-block;\n  width: ${({ size }) => calcCSSValue(size)};\n  height: ${({ size }) => calcCSSValue(size)};\n\n  border: 2px solid #fff;\n  border-bottom-color: transparent;\n  border-radius: 50%;\n\n  animation: rotation 0.7s linear infinite;\n  opacity: 0.6;\n\n  @keyframes rotation {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import { useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { func, string, bool } from 'prop-types';\nimport { Backdrop, Container } from './Modal.styled';\nimport BodyScrollLock from 'components/etc/BodyScrollLock';\nimport { Transition } from 'react-transition-group';\n\nconst rootModal = document.querySelector('#root-modal');\n\nconst TRANS_DURATION = 250;\n\nconst defaultStyle = {\n  transitionProperty: `opacity`,\n  transitionDuration: 'var(--trans-duration)',\n  transitionTimingFunction: 'var(--trans-func)',\n  opacity: 0,\n};\n\nconst transitionStyles = {\n  entering: { opacity: 1 },\n  entered: { opacity: 1 },\n};\n\n//\n// Modal\n//\n\nconst Modal = ({\n  children,\n  bgColor,\n  onClose,\n  bodyScrollLock = true,\n  visible,\n}) => {\n  const backdropRef = useRef(null);\n\n  useEffect(() => {\n    const handleKeydown = ({ code }) =>\n      code === 'Escape' && onClose && onClose();\n\n    window.addEventListener('keydown', handleKeydown);\n\n    return () => window.removeEventListener('keydown', handleKeydown);\n  }, [onClose]);\n\n  const handleBackdropClick = ({ currentTarget, target }) =>\n    currentTarget === target && onClose && onClose();\n\n  return createPortal(\n    <Transition\n      mountOnEnter\n      unmountOnExit\n      timeout={TRANS_DURATION}\n      nodeRef={backdropRef}\n      in={visible}\n    >\n      {state => (\n        <Backdrop\n          ref={backdropRef}\n          onClick={handleBackdropClick}\n          bgColor={bgColor}\n          style={{\n            ...defaultStyle,\n            ...transitionStyles[state],\n          }}\n        >\n          {bodyScrollLock && <BodyScrollLock />}\n          <Container>{children}</Container>\n        </Backdrop>\n      )}\n    </Transition>,\n    rootModal\n  );\n};\n\nModal.propTypes = {\n  bgColor: string,\n  onClose: func,\n  bodyScrollLock: bool,\n  visible: bool,\n};\n\nexport default Modal;\n","import styled from '@emotion/styled';\n\nconst DEF_COLOR_BG = 'rgb(0 0 0 / 0.5)';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n\n  width: 100%;\n  height: 100%;\n  z-index: 999;\n\n  background-color: ${({ bgColor }) => bgColor || DEF_COLOR_BG};\n  overflow: auto;\n`;\n\nexport const Container = styled.div`\n  position: absolute;\n  left: 50%;\n  top: 50%;\n\n  transform: translate(-50%, -50%);\n`;\n","import { useState } from 'react';\nimport Modal from './Modal/Modal';\nimport { Spinner } from '../Spinner';\nimport { ModalContainer, ModalThumb } from './ModalImage.styled';\nimport { string, bool, func } from 'prop-types';\n\nconst COLOR_MODAL_BG = 'rgb(255 255 255 / 0.7)';\n\n//\n// ModalImage\n//\n\nexport const ModalImage = ({ src, alt, visible, onClose }) => {\n  const [wasModalImageLoaded, setWasModalImageLoaded] = useState(false);\n\n  return (\n    <Modal onClose={onClose} bgColor={COLOR_MODAL_BG} visible={visible}>\n      <ModalContainer>\n        <Spinner width={40} visible={!wasModalImageLoaded} />\n        <ModalThumb>\n          <img\n            src={src}\n            alt={alt}\n            onLoad={() => setWasModalImageLoaded(true)}\n          />\n        </ModalThumb>\n      </ModalContainer>\n    </Modal>\n  );\n};\n\nModalImage.propType = {\n  src: string,\n  alt: string,\n  visible: bool,\n  onClose: func,\n};\n","import styled from '@emotion/styled';\nimport { FlexCentered } from 'styles/shared';\n\nexport const ModalContainer = styled.div`\n  position: relative;\n  ${FlexCentered()};\n\n  & :nth-of-type() {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n`;\n\nexport const ModalThumb = styled.div`\n  position: absolute;\n\n  & img {\n    max-height: 90vh;\n    width: auto;\n    /* чтобы оставалось куда кликнуть в бекдроп */\n    max-width: 70vw;\n    object-fit: contain;\n    object-position: center;\n  }\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { number, oneOfType, string } from 'prop-types';\n\nexport const Spinner = ({ width = 40, ...restProps }) => (\n  <RotatingLines\n    strokeColor=\"black\"\n    strokeWidth=\"3\"\n    animationDuration=\"0.75\"\n    width={width}\n    visible={true}\n    {...restProps}\n  />\n);\n\nSpinner.propType = {\n  width: oneOfType([string, number]),\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport TmdbService from 'services/tmdb/tmdbSrv';\nimport { MovieCard } from 'components/MovieCard/MovieCard';\nimport { ErrorMessage } from 'components/ErrorMessage/ErrorMessage';\n\nconst srv = new TmdbService();\n\n//\n// MovieDetails\n//\n\n// !! некоторая информация для фильмов из списка трендов\n// более актуальная, чем при запросе деталей того же фильма\n// Например, рейтинг и кол-во голосов\nconst MovieDetails = ({ loader: Loader }) => {\n  const [error, setError] = useState(null);\n  const [showLoader, setShowLoader] = useState(true);\n  const { movieId } = useParams();\n  const [details, setDetails] = useState(null);\n\n  useEffect(() => {\n    setShowLoader(true);\n\n    Promise.all([\n      srv.getMovieDetails(movieId),\n      srv.getMovieReviews(movieId),\n      srv.getMovieCredits(movieId),\n    ])\n      .then(([movieDetails, reviews, credits]) => {\n        setDetails({ ...movieDetails, reviews, credits });\n      })\n      .catch(setError)\n      .finally(() => setShowLoader(false));\n  }, [movieId]);\n\n  return (\n    <>\n      {showLoader && Loader}\n      {error && <ErrorMessage error={error} />}\n      {!error && details && <MovieCard data={details} />}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["ErrorMessage","error","console","Container","IconError","size","color","Caption","Text","code","LinkButton","to","style","textTransform","propType","shape","message","string","About","budget","revenue","production_countries","genres","release_date","homepage","overview","tagline","crew","cast","runtime","restProps","listRef","useRef","useState","shouldRender","setShouldRender","useEffect","current","children","length","genresList","map","name","join","countries","releaseDate","Date","toLocaleDateString","runtimeHHMM","toISOString","substr","replace","Title","List","ref","Item","Label","Tagline","splitNumIntoTriads","Object","entries","jobName","persons","Cast","preview","LinkPrimary","remaining","number","arrayOf","object","styled","Subtitle","srv","TmdbService","NEW_TAB","target","rel","MovieCard","data","original_title","title","poster_path","credits","reviews","showModal","setShowModal","wasLoaded","setWasLoaded","movieTitle","posterData","original","getImageUrl","src","alt","releaseYear","substring","reviewsCount","total_results","getCastPreview","getCrewPreview","Card","Info","PosterLink","onClick","e","path","preventDefault","clickable","SpinnerWrapper","Spinner","spinnerWidth","Poster","onLoad","Desc","MovieTitle","WellKnownTitle","OriginalTitle","Rating","CastAndCrewLink","Homepage","Overview","ExpandableContent","content","maxHeight","Reviews","ModalImage","visible","onClose","Link","NoPosterBg","TransitionBase","TitleShared","LinkBase","height","vote_average","vote_count","imdb_id","popularity","id","rating","Number","toFixed","tmdbUrl","getTmdbUrl","imdbUrl","getImdbUrl","tmdbData","imdbData","Ratings","VoteAverage","ImdbLink","IconImdbLogo","TmdbLink","IconTmdbLogo","Stat","shortenNum","HashBtnLink","padding","oneOfType","FlexCentered","Tag","calcCSSValue","results","total_pages","setReviews","page","useAutoScroll","scrollBy","rest","ReviewItem","LoadMoreBtn","clickCount","getMovieReviews","then","cur","catch","showError","array","body","document","root","documentElement","BodyScrollLock","top","window","scrollY","bodyCSSText","cssText","isVScrollBarVisible","scrollBehavior","scrollTo","removeProperty","DEF_SCROLL_OPTS","behavior","block","inline","scrollOptions","querySelector","String","ButtonLink","scrollIntoView","centered","showLoader","setShowLoader","btnRef","btnRect","observer","IntersectionObserver","observe","getBoundingClientRect","unobserve","width","btnProps","Button","isLoading","func","bool","ButtonSecondary","rootModal","defaultStyle","transitionProperty","transitionDuration","transitionTimingFunction","opacity","transitionStyles","entering","entered","bgColor","bodyScrollLock","backdropRef","handleKeydown","addEventListener","removeEventListener","handleBackdropClick","currentTarget","createPortal","mountOnEnter","unmountOnExit","timeout","nodeRef","in","state","Backdrop","wasModalImageLoaded","setWasModalImageLoaded","ModalContainer","ModalThumb","strokeColor","strokeWidth","animationDuration","Loader","loader","setError","movieId","useParams","details","setDetails","Promise","all","getMovieDetails","getMovieCredits","movieDetails","finally"],"sourceRoot":""}
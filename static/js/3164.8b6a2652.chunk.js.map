{"version":3,"file":"static/js/3164.8b6a2652.chunk.js","mappings":"iSA0DA,UAlDkB,SAAC,GAAiD,IAA/CA,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,SAAaC,GAAgB,YACjE,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,MAIAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACdJ,EAAQ,UAACE,EAAaG,IAAI,gBAAlB,QAA8B,GACvC,GAAE,CAACH,IAgBJ,OACE,SAAC,EAAAI,UAAD,CAAWZ,MAAOA,EAAlB,UACE,UAAC,EAAAa,WAAD,CAAYZ,SARS,SAAAa,GACvBA,EAAEC,iBACFN,EAAgB,CAAEJ,MAAAA,IAClBJ,GAAYA,EAASI,EAAOS,EAC7B,EAIG,WACE,SAAC,WAAD,QACEE,aAAa,MACbC,YAAY,mBACZf,SAnBwB,SAAAY,GAC9B,IAAMT,GAAS,OAADS,QAAC,IAADA,OAAA,EAAAA,EAAGI,OAAOC,MAAMC,SAAU,GACxCd,EAASD,GACTH,GAAYA,EAASG,EAAOS,EAC7B,EAgBOK,MAAOd,GACHF,KAGN,SAAC,EAAAkB,UAAD,CAAWC,KAAK,SAASC,UAAWlB,EAApC,UACE,SAAC,EAAAmB,WAAD,CAAYC,KAAK,eAK1B,C,sLC7CYb,EAAYc,EAAAA,EAAAA,IAAH,gaACV,gBAAGC,EAAH,EAAGA,OAAH,OAAgBC,EAAAA,EAAAA,cAAaD,IAAW,MAAxC,IACD,gBAAGE,EAAH,EAAGA,MAAH,OAAeD,EAAAA,EAAAA,cAAaC,IAAU,MAAtC,IAOPC,EAAAA,EAAAA,gBAAe,4BAYNjB,EAAaa,EAAAA,EAAAA,KAAH,4FACnBK,EAAAA,EAAAA,iBAOSV,GAAYK,EAAAA,EAAAA,GAAOM,EAAAA,cAAPN,CAAH,wI,iHCFtB,UA3BkB,SAAC,GAA6C,IAA3CP,EAA0C,EAA1CA,MAAOG,EAAmC,EAAnCA,KAAMpB,EAA6B,EAA7BA,SAAaC,GAAgB,YAC7D,OACE,SAAC,EAAA8B,MAAD,WACE,UAAC,EAAAC,aAAD,YACE,SAAC,EAAAC,OAAD,QACEb,KAAMA,GAAQ,OACdpB,SAAUA,EACViB,MAAOA,GACHhB,IAELgB,IAEC,SAAC,EAAAiB,SAAD,CAAUd,KAAK,SAASe,QAAS,kBAAMnC,EAAS,KAAf,EAAjC,UACE,SAAC,MAAD,CAAWuB,KAAK,eAM3B,C,sMCpBYQ,EAAQP,EAAAA,EAAAA,MAAH,uDACP,qBAAGG,OAAqB,MAAxB,IACC,qBAAGF,QAAuB,MAA1B,IAGCO,EAAeR,EAAAA,EAAAA,IAAH,wJAMb,qBAAGC,QAAuB,MAA1B,IAICQ,EAAQT,EAAAA,EAAAA,MAAH,iSAYdI,EAAAA,EAAAA,mBAQSM,GAAWV,EAAAA,EAAAA,GAAOY,EAAAA,WAAPZ,CAAH,uQ","sources":["components/Searchbar/Searchbar.jsx","components/Searchbar/Searchbar.styled.jsx","components/etc/TextField/TextField.jsx","components/etc/TextField/TextField.styled.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { oneOfType, string, number, func } from 'prop-types';\nimport { SearchBtn, SearchForm, Container } from './Searchbar.styled';\nimport TextField from 'components/etc/TextField';\nimport { IconSearch } from 'styles/icons';\n\n// извлекаем onChange, чтобы не перебивал (1) при прокидывании restProps (2)\nconst Searchbar = ({ style, onSubmit, onChange, ...restProps }) => {\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // При изменении вручную строки запроса и нажатии Enter -\n  // изменится текст в поле поиска\n  useEffect(() => {\n    setQuery(searchParams.get('query') ?? '');\n  }, [searchParams]);\n\n  // можно менять ?query в запросе тут, но надо делать debounce\n  const handleSearchQueryChange = e => {\n    const query = e?.target.value.trim() || '';\n    setQuery(query);\n    onChange && onChange(query, e);\n  };\n\n  // Менеям ?query в строке запроса только при сабмите\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    setSearchParams({ query });\n    onSubmit && onSubmit(query, e);\n  };\n\n  return (\n    <Container style={style}>\n      <SearchForm onSubmit={handleFormSubmit}>\n        <TextField\n          autocomplete=\"off\"\n          placeholder=\"Search movies...\"\n          onChange={handleSearchQueryChange} // (1)\n          value={query}\n          {...restProps} // (2)\n        />\n\n        <SearchBtn type=\"submit\" disabled={!query}>\n          <IconSearch size=\"100%\" />\n        </SearchBtn>\n      </SearchForm>\n    </Container>\n  );\n};\n\nSearchbar.propTypes = {\n  width: oneOfType([string, number]),\n  height: oneOfType([string, number]),\n  onSubmit: func,\n  onChange: func,\n};\n\nexport default Searchbar;\n","import styled from '@emotion/styled';\nimport { ButtonPrimary, FlexCentered, TransitionBase } from 'styles/shared';\nimport { calcCSSValue } from 'utils';\n\nexport const Container = styled.div`\n  height: ${({ height }) => calcCSSValue(height) || '100%'};\n  width: ${({ width }) => calcCSSValue(width) || '100%'};\n  margin: 0 auto 0 auto;\n\n  border: 1px solid rgb(var(--color-blue-rgb), 0.5);\n  border-radius: var(--border-radius);\n  overflow: hidden;\n\n  ${TransitionBase('box-shadow border-color')};\n\n  &:focus-within {\n    box-shadow: 0 0 0 0.3rem rgb(var(--color-blue-rgb), 0.2);\n    border-color: rgb(var(--color-blue-rgb), 0.7);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 70%;\n  }\n`;\n\nexport const SearchForm = styled.form`\n  ${FlexCentered()};\n\n  height: 100%;\n  width: 100%;\n  border-radius: unset;\n`;\n\nexport const SearchBtn = styled(ButtonPrimary)`\n  height: 100%;\n  padding: 8px 15px 8px 15px;\n  border-radius: unset;\n  background-color: var(--color-blue);\n`;\n","import { func, string } from 'prop-types';\nimport { ClearBtn, InputWrapper, Input, Field } from './TextField.styled';\nimport { VscClose as IconClose } from 'react-icons/vsc';\n\nconst TextField = ({ value, type, onChange, ...restProps }) => {\n  return (\n    <Field>\n      <InputWrapper>\n        <Input\n          type={type || 'text'}\n          onChange={onChange}\n          value={value}\n          {...restProps}\n        />\n        {value && (\n          // !! обязательно type=\"button\", по-умолчанию ставит \"submit\"\n          <ClearBtn type=\"button\" onClick={() => onChange(null)}>\n            <IconClose size=\"100%\" />\n          </ClearBtn>\n        )}\n      </InputWrapper>\n    </Field>\n  );\n};\n\nTextField.propTypes = {\n  value: string,\n  type: string,\n  onChange: func,\n};\n\nexport default TextField;\n","import styled from '@emotion/styled';\nimport { ButtonBase, TransitionBase } from 'styles/shared';\n\nexport const Field = styled.label`\n  width: ${({ width }) => width || '100%'};\n  height: ${({ height }) => height || '100%'};\n`;\n\nexport const InputWrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n\n  width: 100%;\n  height: ${({ height }) => height || '100%'};\n  color: var(--color-text);\n`;\n\nexport const Input = styled.input`\n  height: 100%;\n  width: 100%;\n  padding: 0 40px 0 20px;\n\n  font-family: inherit;\n  font-size: inherit;\n  background-color: white;\n\n  border: unset;\n  outline: none;\n\n  ${TransitionBase()};\n\n  &::placeholder {\n    opacity: 0.6;\n    text-transform: capitalize;\n  }\n`;\n\nexport const ClearBtn = styled(ButtonBase)`\n  position: absolute;\n  top: 50%;\n  right: 10px;\n\n  height: 60%;\n  padding: 3px;\n\n  color: gray;\n  transform: translateY(-50%);\n  transition-property: color;\n\n  &:focus-visible,\n  &:hover {\n    color: var(--color-black);\n  }\n`;\n"],"names":["style","onSubmit","onChange","restProps","useState","query","setQuery","useSearchParams","searchParams","setSearchParams","useEffect","get","Container","SearchForm","e","preventDefault","autocomplete","placeholder","target","value","trim","SearchBtn","type","disabled","IconSearch","size","styled","height","calcCSSValue","width","TransitionBase","FlexCentered","ButtonPrimary","Field","InputWrapper","Input","ClearBtn","onClick","ButtonBase"],"sourceRoot":""}
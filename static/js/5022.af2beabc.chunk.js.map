{"version":3,"file":"static/js/5022.af2beabc.chunk.js","mappings":"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","sources":["services/tmdb/cache.js","services/tmdb/tmdbSrv.js"],"sourcesContent":["import { setProp, getProp } from 'utils';\n\nexport default class Cache {\n  #cache = {};\n\n  set(path, value) {\n    setProp(this.#cache, path, value);\n  }\n\n  get(path) {\n    return getProp(this.#cache, path);\n  }\n\n  get data() {\n    return { ...this.#cache };\n  }\n\n  clear() {\n    this.#cache = {};\n  }\n}\n","import axios from 'axios';\nimport { isObj, isArray, camelToSnake, normalizeStr } from '../../utils';\nimport Cache from './cache';\n\nconst cache = new Cache();\n// let controller;\n\nconst data = {\n  API_BASE_URL: 'https://api.themoviedb.org/3',\n  IMAGE_BASE_URL: 'https://image.tmdb.org/t/p',\n  TMDB_BASE_URL: 'https://www.themoviedb.org/movie',\n  IMDB_BASE_URL: 'https://www.imdb.com/title',\n  API_KEY: '86d04e898c465c8de09e1ea2fc383ab8',\n};\n\n//\n// TmdbService\n//\n\nexport default class TmdbService {\n  #response;\n  #instance;\n\n  constructor() {\n    if (this.#instance) return this.#instance;\n    this.#instance = this;\n  }\n\n  /**\n   *\n   * @param {*} relPath\n   * @param {*} size\n   * @returns\n   */\n  getImageUrl(relPath, size) {\n    const sz = isNaN(parseInt(size)) ? 'original' : `w${size}`;\n    return `${data.IMAGE_BASE_URL}/${sz}/${relPath}`;\n  }\n\n  getTmdbUrl(id) {\n    return `${data.TMDB_BASE_URL}/${id}`;\n  }\n\n  getImdbUrl(imdbId) {\n    return `${data.IMDB_BASE_URL}/${imdbId}`;\n  }\n\n  /**\n   *\n   * @param {*} url\n   * @returns\n   */\n  async fetch(url) {\n    // controller = new AbortController();\n    // const { signal } = controller;\n\n    try {\n      const resp = await axios.get(url /* { signal } */);\n      return { ...(this.#response = resp) };\n      // error\n    } catch (err) {\n      this.#response = err;\n      throw err;\n    }\n  }\n\n  /**\n   *\n   * @param {*} path\n   * @param {*} params\n   * @returns\n   */\n  async get(path, params) {\n    const url = `${data.API_BASE_URL}/${path}?api_key=${\n      data.API_KEY\n    }&${new URLSearchParams(namesToSnake(params))}`;\n\n    return await this.fetch(url);\n  }\n\n  /**\n   *\n   * @param {array} ids - массив идентификаторов жанра\n   * @returns массив названий жанра для каждого идентификатора\n   */\n  async getGenres(ids) {\n    if (!isArray(ids)) return [];\n\n    if (!cache.get('genres')) {\n      const resp = await this.get(`genre/movie/list`);\n      cache.set('genres', resp.data.genres);\n    }\n\n    return cache\n      .get('genres')\n      .filter(({ id }) => ids.includes(id))\n      .map(({ name }) => name);\n  }\n\n  /**\n   *\n   * @param {*} period\n   * @param {*} params\n   * @returns\n   */\n  async getTrendingMovies(period, params) {\n    // не кешируем - грузятся страницами\n    const { data } = await this.get(\n      `trending/movie/${normalizeStr(period)}`,\n      params\n    );\n\n    return data;\n  }\n\n  /**\n   *\n   * @param {*} id\n   * @param {*} params\n   * @returns\n   */\n  async getMovieDetails(id, params) {\n    const cached = cache.get(`movie/${id}`);\n    if (cached) return cached;\n\n    const { data } = await this.get(`movie/${id}`, params);\n    cache.set(`movie/${id}`, data);\n\n    return data;\n  }\n\n  async getMovieCredits(id, params) {\n    const cached = cache.get(`movie/${id}/credits`);\n    if (cached) return cached;\n\n    const { data } = await this.get(`movie/${id}/credits`, params);\n    cache.set(`movie/${id}/credits`, data);\n\n    return data;\n  }\n\n  // не кешируем - грузятся страницами\n  async getMovieReviews(id, params) {\n    const { data } = await this.get(`movie/${id}/reviews`, params);\n    return data;\n  }\n\n  async searchMovies(query, params) {\n    const { data } = await this.get(`search/movie`, { query, ...params });\n    return data;\n  }\n\n  get cache() {\n    return cache.data;\n  }\n\n  // abort() {\n  //   controller.abort();\n  // }\n}\n\n/**\n *\n * @param {object} obj\n * @returns - копию obj с именами свойств в snake_case\n */\nfunction namesToSnake(obj) {\n  return isObj(obj)\n    ? Object.entries(obj).reduce((res, [name, val]) => {\n        res[camelToSnake(name)] = val;\n        return res;\n      }, {})\n    : {};\n}\n"],"names":["Cache","path","value","setProp","this","getProp","cache","data","TmdbService","relPath","size","sz","isNaN","parseInt","id","imdbId","url","axios","resp","params","URLSearchParams","obj","isObj","Object","entries","reduce","res","name","val","camelToSnake","fetch","ids","isArray","get","set","genres","filter","includes","map","period","normalizeStr","cached","query"],"sourceRoot":""}
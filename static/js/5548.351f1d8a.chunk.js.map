{"version":3,"file":"static/js/5548.351f1d8a.chunk.js","mappings":"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","sources":["components/MovieCard/Rating/Rating.jsx","components/MovieCard/Rating/Rating.styled.jsx","components/etc/HashBtnLink/HashBtnLink.jsx","services/tmdb/cache.js","services/tmdb/tmdbSrv.js"],"sourcesContent":["import { number, oneOfType, string } from 'prop-types';\nimport { IconImdbLogo, IconTmdbLogo } from 'styles/icons';\nimport { HashBtnLink } from 'components/etc/HashBtnLink/HashBtnLink';\nimport TmdbService from 'services/tmdb/tmdbSrv';\nimport { shortenNum } from 'utils';\n\nimport {\n  VoteAverage,\n  TmdbLink,\n  ImdbLink,\n  Ratings,\n  Stat,\n} from './Rating.styled';\n\nconst srv = new TmdbService();\nconst DEF_HEIGHT = 40;\nconst NEW_TAB = { target: '_blank', rel: 'noopener noreferrer' };\n\n//\n// Rating\n//\n\nexport const Rating = ({\n  height = DEF_HEIGHT,\n  vote_average,\n  vote_count,\n  popularity,\n  imdb_id,\n  reviewsCount,\n  id,\n  ...restProps\n}) => {\n  let rating = Number(vote_average);\n  rating = rating ? rating.toFixed(1) : 'N/A';\n\n  const tmdbUrl = srv.getTmdbUrl(id);\n  const imdbUrl = srv.getImdbUrl(imdb_id);\n  const tmdbData = { to: tmdbUrl, title: tmdbUrl, height, ...NEW_TAB };\n  const imdbData = { to: imdbUrl, title: imdbUrl, height, ...NEW_TAB };\n\n  return (\n    <Ratings>\n      <VoteAverage {...tmdbData}>{rating}</VoteAverage>\n      {imdb_id && (\n        <ImdbLink {...imdbData}>\n          <IconImdbLogo />\n        </ImdbLink>\n      )}\n      <TmdbLink {...tmdbData}>\n        <IconTmdbLogo size={height} title={tmdbUrl} />\n      </TmdbLink>\n\n      {vote_count > 0 && (\n        <Stat>\n          <span>{shortenNum(vote_count)}</span> votes\n        </Stat>\n      )}\n\n      {reviewsCount > 0 && (\n        <HashBtnLink to=\"#reviews\" style={{ padding: '5px 5px 5px 0' }}>\n          <span>{reviewsCount}</span> review(s)\n        </HashBtnLink>\n      )}\n    </Ratings>\n  );\n};\n\nRating.propType = {\n  height: oneOfType([string, number]),\n  vote_average: number,\n  vote_count: number,\n  popularity: number,\n  imdb_id: string,\n  reviewsCount: number,\n  id: number,\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nimport { FlexCentered, TransitionBase } from 'styles/shared';\nimport { calcCSSValue } from 'utils';\n\nexport const Ratings = styled.div`\n  ${FlexCentered('gap: 15px; flex-wrap: wrap;')};\n\n  @media screen and (min-width: 768px) {\n    justify-content: initial;\n  }\n`;\n\nconst Tag = styled(Link)`\n  ${FlexCentered()};\n  ${TransitionBase('filter')};\n\n  height: ${({ height }) => calcCSSValue(height)};\n  border-radius: var(--border-radius);\n  color: white;\n\n  &:hover,\n  &:focus-visible {\n    filter: brightness(1.05);\n  }\n`;\n\nexport const VoteAverage = styled(Tag)`\n  padding: 0 10px 0 10px;\n  font-family: Arial Black;\n  font-size: 22px;\n  line-height: 0;\n  background-color: var(--color-orange);\n`;\n\nexport const ImdbLink = styled(Tag)`\n  padding: 0 7px 0 7px;\n  background-color: var(--color-imdb-yellow);\n\n  & svg {\n    height: 60%;\n  }\n`;\n\nexport const Stat = styled.span`\n  font-size: 14px;\n  & span {\n    font-weight: bold;\n  }\n`;\n\nexport const TmdbLink = styled(Tag)`\n  padding: 0 7px 0 7px;\n  background: var(--color-tmdb-gradient);\n\n  & svg {\n    height: 100%;\n  }\n`;\n","import { ButtonLink } from 'styles/shared';\nimport { useEffect, useRef } from 'react';\nimport { string, shape } from 'prop-types';\n\nconst DEF_SCROLL_OPTS = {\n  behavior: 'smooth',\n  block: 'nearest',\n  inline: 'nearest',\n};\n\n/**\n *\n *  @param to - любой валидный селектор\n *  @param scrollOptions - параметры для scrollIntoView\n */\nexport const HashBtnLink = ({\n  to,\n  children,\n  scrollOptions = DEF_SCROLL_OPTS,\n  ...restProps\n}) => {\n  const target = useRef(null);\n\n  useEffect(() => {\n    target.current = document.querySelector(String(to) || null);\n  }, [to]);\n\n  return (\n    <ButtonLink\n      onClick={() => target.current?.scrollIntoView(scrollOptions)}\n      {...restProps}\n    >\n      {children}\n    </ButtonLink>\n  );\n};\n\nHashBtnLink.propType = {\n  to: string,\n  scrollOptions: shape({\n    behavior: string,\n    block: string,\n    inline: string,\n  }),\n};\n","import { setProp, getProp } from 'utils';\n\nexport default class Cache {\n  #cache = {};\n\n  set(path, value) {\n    setProp(this.#cache, path, value);\n  }\n\n  get(path) {\n    return getProp(this.#cache, path);\n  }\n\n  get data() {\n    return { ...this.#cache };\n  }\n\n  clear() {\n    this.#cache = {};\n  }\n}\n","import axios from 'axios';\nimport { isObj, isArray, camelToSnake, normalizeStr } from '../../utils';\nimport Cache from './cache';\n\nconst cache = new Cache();\nlet controller;\n\nconst data = {\n  API_BASE_URL: 'https://api.themoviedb.org/3',\n  IMAGE_BASE_URL: 'https://image.tmdb.org/t/p',\n  TMDB_BASE_URL: 'https://www.themoviedb.org/movie',\n  IMDB_BASE_URL: 'https://www.imdb.com/title',\n  API_KEY: '86d04e898c465c8de09e1ea2fc383ab8',\n};\n\n//\n// TmdbService\n//\n\nexport default class TmdbService {\n  #response;\n  #instance;\n\n  constructor() {\n    if (this.#instance) return this.#instance;\n    this.#instance = this;\n  }\n\n  /**\n   *\n   * @param {*} relPath\n   * @param {*} size\n   * @returns\n   */\n  getImageUrl(relPath, size) {\n    const sz = isNaN(parseInt(size)) ? 'original' : `w${size}`;\n    return `${data.IMAGE_BASE_URL}/${sz}/${relPath}`;\n  }\n\n  getTmdbUrl(id) {\n    return `${data.TMDB_BASE_URL}/${id}`;\n  }\n\n  getImdbUrl(imdbId) {\n    return `${data.IMDB_BASE_URL}/${imdbId}`;\n  }\n\n  /**\n   *\n   * @param {*} url\n   * @returns\n   */\n  async fetch(url) {\n    controller = new AbortController();\n    const { signal } = controller;\n\n    try {\n      const resp = await axios.get(url, { signal });\n      return { ...(this.#response = resp) };\n      // error\n    } catch (err) {\n      this.#response = err;\n      throw err;\n    }\n  }\n\n  /**\n   *\n   * @param {*} path\n   * @param {*} params\n   * @returns\n   */\n  async get(path, params) {\n    const url = `${data.API_BASE_URL}/${path}?api_key=${\n      data.API_KEY\n    }&${new URLSearchParams(namesToSnake(params))}`;\n\n    return await this.fetch(url);\n  }\n\n  /**\n   *\n   * @param {array} ids - массив идентификаторов жанра\n   * @returns массив названий жанра для каждого идентификатора\n   */\n  async getGenres(ids) {\n    if (!isArray(ids)) return [];\n\n    if (!cache.get('genres')) {\n      const resp = await this.get(`genre/movie/list`);\n      cache.set('genres', resp.data.genres);\n    }\n\n    return cache\n      .get('genres')\n      .filter(({ id }) => ids.includes(id))\n      .map(({ name }) => name);\n  }\n\n  /**\n   *\n   * @param {*} period\n   * @param {*} params\n   * @returns\n   */\n  async getTrendingMovies(period, params) {\n    // не кешируем - грузятся страницами\n    const { data } = await this.get(\n      `trending/movie/${normalizeStr(period)}`,\n      params\n    );\n\n    return data;\n  }\n\n  /**\n   *\n   * @param {*} id\n   * @param {*} params\n   * @returns\n   */\n  async getMovieDetails(id, params) {\n    const cached = cache.get(`movie/${id}`);\n    if (cached) return cached;\n\n    const { data } = await this.get(`movie/${id}`, params);\n    cache.set(`movie/${id}`, data);\n\n    return data;\n  }\n\n  async getMovieCredits(id, params) {\n    const cached = cache.get(`movie/${id}/credits`);\n    if (cached) return cached;\n\n    const { data } = await this.get(`movie/${id}/credits`, params);\n    cache.set(`movie/${id}/credits`, data);\n\n    return data;\n  }\n\n  // не кешируем - грузятся страницами\n  async getMovieReviews(id, params) {\n    const { data } = await this.get(`movie/${id}/reviews`, params);\n    return data;\n  }\n\n  async searchMovies(query, params) {\n    const { data } = await this.get(`search/movie`, { query, ...params });\n    return data;\n  }\n\n  get cache() {\n    return cache.data;\n  }\n\n  abort() {\n    controller.abort();\n  }\n}\n\n/**\n *\n * @param {object} obj\n * @returns - копию obj с именами свойств в snake_case\n */\nfunction namesToSnake(obj) {\n  return isObj(obj)\n    ? Object.entries(obj).reduce((res, [name, val]) => {\n        res[camelToSnake(name)] = val;\n        return res;\n      }, {})\n    : {};\n}\n"],"names":["srv","TmdbService","NEW_TAB","target","rel","Rating","height","vote_average","vote_count","imdb_id","popularity","reviewsCount","id","rating","Number","toFixed","tmdbUrl","getTmdbUrl","imdbUrl","getImdbUrl","tmdbData","to","title","imdbData","Ratings","VoteAverage","ImdbLink","IconImdbLogo","TmdbLink","IconTmdbLogo","size","Stat","shortenNum","HashBtnLink","style","padding","propType","oneOfType","string","number","styled","FlexCentered","Tag","Link","TransitionBase","calcCSSValue","DEF_SCROLL_OPTS","behavior","block","inline","children","scrollOptions","restProps","useRef","useEffect","current","document","querySelector","String","ButtonLink","onClick","scrollIntoView","shape","Cache","path","value","setProp","this","getProp","controller","cache","data","relPath","sz","isNaN","parseInt","imdbId","url","AbortController","signal","axios","resp","params","URLSearchParams","obj","isObj","Object","entries","reduce","res","name","val","camelToSnake","fetch","ids","isArray","get","set","genres","filter","includes","map","period","normalizeStr","cached","query","abort"],"sourceRoot":""}
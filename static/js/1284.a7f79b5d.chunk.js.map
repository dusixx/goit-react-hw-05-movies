{"version":3,"file":"static/js/1284.a7f79b5d.chunk.js","mappings":"iTAKaA,EAAgB,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,QAAYC,GAAgB,YACxE,GAA4BC,EAAAA,EAAAA,UAASH,GAArC,eAAOI,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACRD,EAAUL,EACX,GAAE,CAACA,IAEJ,IAAMO,EAAc,SAAAC,GAClBH,EAAUG,GACVP,GAAWA,GAAQQ,EAAAA,EAAAA,cAAaD,GACjC,EAEKE,GAAOC,EAAAA,EAAAA,SAAQZ,GAGrB,OAFKK,GAAQC,EAAUK,EAAK,IAG1BA,EAAKE,OAAS,IACZ,SAAC,EAAAC,aAAD,kBAAiBX,GAAjB,aACGQ,EAAKI,KAAI,SAAAN,GAAI,OACZ,SAAC,EAAAO,aAAD,CAEEX,OAAQA,IAAWI,EACnBP,QAAS,kBAAMM,EAAYC,EAAlB,EAHX,SAKGA,GAJIA,EAFK,MAYrB,EAEDV,EAAckB,SAAW,CACvBjB,OAAOkB,EAAAA,EAAAA,WAAU,CAACC,EAAAA,QAAQC,EAAAA,EAAAA,SAAQD,EAAAA,UAClClB,MAAOkB,EAAAA,OACPjB,QAASmB,EAAAA,K,+IChCEP,EAAcQ,EAAAA,EAAAA,IAAH,gCACpBC,EAAAA,EAAAA,cAAa,aAGJP,GAAeM,EAAAA,EAAAA,GAAOE,EAAAA,WAAPF,CAAH,gbAcrBG,EAAAA,EAAAA,gBAAe,2BAER,qBAAGpB,OAzBO,QACE,mBAwBZ,IAEW,qBAAGA,OAzBD,sBA0BO,aADT,IAKE,qBAAGA,QA7BO,WA6BV,G","sources":["components/etc/OptionButtons/OptionButtons.jsx","components/etc/OptionButtons/OptionButtons.styled.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { string, func, oneOfType, arrayOf } from 'prop-types';\nimport { OptionsList, OptionButton } from './OptionButtons.styled';\nimport { normalizeStr, getList } from 'utils';\n\nexport const OptionButtons = ({ items, value, onClick, ...restProps }) => {\n  const [active, setActive] = useState(value);\n\n  useEffect(() => {\n    setActive(value);\n  }, [value]);\n\n  const handleClick = name => {\n    setActive(name);\n    onClick && onClick(normalizeStr(name));\n  };\n\n  const btns = getList(items);\n  if (!active) setActive(btns[0]);\n\n  return (\n    btns.length > 0 && (\n      <OptionsList {...restProps}>\n        {btns.map(name => (\n          <OptionButton\n            key={name}\n            active={active === name}\n            onClick={() => handleClick(name)}\n          >\n            {name}\n          </OptionButton>\n        ))}\n      </OptionsList>\n    )\n  );\n};\n\nOptionButtons.propType = {\n  items: oneOfType([string, arrayOf(string)]),\n  value: string,\n  onClick: func,\n};\n","import styled from '@emotion/styled';\nimport { ButtonBase, FlexCentered, TransitionBase } from 'styles/shared';\n\nconst COLOR_ACTIVE = 'white';\nconst COLOR_INACTIVE = 'var(--color-text)';\nconst COLOR_ACTIVE_BG = 'var(--color-orange)';\nconst COLOR_INACTIVE_FOCUSED_BG = 'lightgray';\n\nexport const OptionsList = styled.div`\n  ${FlexCentered('gap: 8px')};\n`;\n\nexport const OptionButton = styled(ButtonBase)`\n  position: relative;\n  padding: 5px 12px 5px 12px;\n\n  font-family: inherit;\n  font-size: 12px;\n  letter-spacing: -0.3px;\n  text-transform: capitalize;\n\n  @media screen and (min-width: 320px) {\n    font-size: inherit;\n  }\n\n  border-radius: calc(var(--border-radius) * 0.8);\n  ${TransitionBase('color background-color')};\n\n  color: ${({ active }) => (active ? COLOR_ACTIVE : COLOR_INACTIVE)};\n\n  background-color: ${({ active }) =>\n    active ? COLOR_ACTIVE_BG : 'transparent'};\n\n  &:focus-visible,\n  &:hover {\n    background-color: ${({ active }) => !active && COLOR_INACTIVE_FOCUSED_BG};\n  }\n`;\n"],"names":["OptionButtons","items","value","onClick","restProps","useState","active","setActive","useEffect","handleClick","name","normalizeStr","btns","getList","length","OptionsList","map","OptionButton","propType","oneOfType","string","arrayOf","func","styled","FlexCentered","ButtonBase","TransitionBase"],"sourceRoot":""}